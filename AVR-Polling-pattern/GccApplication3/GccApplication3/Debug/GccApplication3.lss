
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000008c6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  0000096e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001101  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aca  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a96  00000000  00000000  000026ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bf  00000000  00000000  0000389e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	
	DDRC = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  96:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
  98:	8a bb       	out	0x1a, r24	; 26

	masterInit();
  9a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <masterInit>
	tc72Init();
  9e:	0e 94 5f 02 	call	0x4be	; 0x4be <tc72Init>

	PORTB |= (1 << 4);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	88 bb       	out	0x18, r24	; 24
	/*Read the MSB*/
	masterTransmit(0x02);
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	0e 94 57 02 	call	0x4ae	; 0x4ae <masterTransmit>
	/*Issue one more clock frame
	to force data out*/
	masterTransmit(0x00);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <masterTransmit>
	PORTB &= ~(1 << 4);
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x2c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x32>
  c4:	00 00       	nop

	_delay_ms(1);
	msb = masterReceive();
  c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <masterReceive>
  ca:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <msb>

	PORTB |= (1 << 4);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	88 bb       	out	0x18, r24	; 24
	/*Read The LSB*/
	masterTransmit(0x01);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 57 02 	call	0x4ae	; 0x4ae <masterTransmit>
	/*Issue one more clock frame
	to force data out*/
	masterTransmit(0x00);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <masterTransmit>
	PORTB &= ~(1 << 4);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	89 ef       	ldi	r24, 0xF9	; 249
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5e>
  f0:	00 00       	nop

	_delay_ms(1);

	lsb = masterReceive();
  f2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <masterReceive>
  f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <lsb>

	PORTB = lsb;
  fa:	88 bb       	out	0x18, r24	; 24

	displayTemperature(msb, lsb);
  fc:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <lsb>
 100:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <msb>
 104:	0e 94 74 01 	call	0x2e8	; 0x2e8 <displayTemperature>

	X = (msb << 8) + lsb;
 108:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <msb>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	98 2f       	mov	r25, r24
 110:	88 27       	eor	r24, r24
 112:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <lsb>
 116:	82 0f       	add	r24, r18
 118:	91 1d       	adc	r25, r1
 11a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <X+0x1>
 11e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <X>
 122:	8b e7       	ldi	r24, 0x7B	; 123
 124:	92 e9       	ldi	r25, 0x92	; 146
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x94>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x9a>
 12c:	00 00       	nop

	_delay_ms(150);

	StartTimer();
 12e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <StartTimer>
	EnableInterrupt();
 132:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EnableInterrupt>
	SetPollingTime(2000);
 136:	80 ed       	ldi	r24, 0xD0	; 208
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	0e 94 de 00 	call	0x1bc	; 0x1bc <SetPollingTime>
	StartPolling();
 13e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <StartPolling>

	while (1)
	{
		INITIALZIE_PWM_TIMER(50);
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	0e 94 66 01 	call	0x2cc	; 0x2cc <INITIALZIE_PWM_TIMER>
		//  lsb = SPDR ; 
		//  SPDR =(char)(X>>8);
		//  msb = SPDR;
		// displayTemperature(msb, lsb);
		// X = (msb << 8) + lsb;
		Poll();
 148:	0e 94 a7 00 	call	0x14e	; 0x14e <Poll>
 14c:	fa cf       	rjmp	.-12     	; 0x142 <main+0xb0>

0000014e <Poll>:
	polling_enabled=1;
}

void StopPolling(void)
{
	polling_enabled=0;
 14e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <polling_enabled>
 152:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <polling_enabled+0x1>
 156:	89 2b       	or	r24, r25
 158:	d1 f0       	breq	.+52     	; 0x18e <Poll+0x40>
 15a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 15e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 162:	89 2b       	or	r24, r25
 164:	a1 f4       	brne	.+40     	; 0x18e <Poll+0x40>
 166:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <X>
 16a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <X+0x1>
 16e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <HANDLE_DATA>
 172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <X>
 176:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <X+0x1>
 17a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <lsb>
 17e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <msb>
 182:	68 2f       	mov	r22, r24
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	89 2f       	mov	r24, r25
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <displayTemperature>
 18e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 192:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 1a4:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 1a8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 1ac:	08 95       	ret

000001ae <StartPolling>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <polling_enabled+0x1>
 1b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <polling_enabled>
 1ba:	08 95       	ret

000001bc <SetPollingTime>:
}

void SetPollingTime(int polling_time)
{
	polling_counter = polling_time/100;
 1bc:	64 e6       	ldi	r22, 0x64	; 100
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 1c4:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 1cc:	08 95       	ret

000001ce <StartTimer>:
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS11) | (1 << CS10);
}

void StopTimer(void)
{
	TCCR1B &= ~((1 << WGM12) | (1 << CS12) | (1 << CS11) | (1 << CS10));
 1ce:	1d bc       	out	0x2d, r1	; 45
 1d0:	1c bc       	out	0x2c, r1	; 44
 1d2:	87 e8       	ldi	r24, 0x87	; 135
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	9b bd       	out	0x2b, r25	; 43
 1d8:	8a bd       	out	0x2a, r24	; 42
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	8f bd       	out	0x2f, r24	; 47
 1de:	8f e0       	ldi	r24, 0x0F	; 15
 1e0:	8e bd       	out	0x2e, r24	; 46
 1e2:	08 95       	ret

000001e4 <EnableInterrupt>:
{
	// enable overflow interrupt
	// sei();
	// TIMSK |= (1 << TOIE1);
	/*Enable timer interrupt*/
	TIMSK |= (1 << OCIE1A);
 1e4:	89 b7       	in	r24, 0x39	; 57
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	89 bf       	out	0x39, r24	; 57
	//sei();
	// Enable interrupts by setting I-bit
	SREG  |= (1<<7);
 1ea:	8f b7       	in	r24, 0x3f	; 63
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	8f bf       	out	0x3f, r24	; 63
 1f0:	08 95       	ret

000001f2 <HANDLE_DATA>:
#define KP 0.1f
#define KI 0.01f
float integral = 0;

int HANDLE_DATA(int temp)
{
 1f2:	8f 92       	push	r8
 1f4:	9f 92       	push	r9
 1f6:	af 92       	push	r10
 1f8:	bf 92       	push	r11
 1fa:	cf 92       	push	r12
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	8c 01       	movw	r16, r24
	// if (C_temp < T_temp)
	// {
	// 	//return temp;
	// 	//return 5;
	// }
	int error = (C_temp - T_temp);
 20c:	bc 01       	movw	r22, r24
 20e:	6e 51       	subi	r22, 0x1E	; 30
 210:	71 09       	sbc	r23, r1
	integral = integral + error;
 212:	07 2e       	mov	r0, r23
 214:	00 0c       	add	r0, r0
 216:	88 0b       	sbc	r24, r24
 218:	99 0b       	sbc	r25, r25
 21a:	0e 94 17 03 	call	0x62e	; 0x62e <__floatsisf>
 21e:	4b 01       	movw	r8, r22
 220:	5c 01       	movw	r10, r24
 222:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <integral>
 226:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <integral+0x1>
 22a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <integral+0x2>
 22e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <integral+0x3>
 232:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3>
 236:	6b 01       	movw	r12, r22
 238:	7c 01       	movw	r14, r24
 23a:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <integral>
 23e:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <integral+0x1>
 242:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <integral+0x2>
 246:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <integral+0x3>
	int PWM_signal = (KP * error) + (KI * integral);
 24a:	2d ec       	ldi	r18, 0xCD	; 205
 24c:	3c ec       	ldi	r19, 0xCC	; 204
 24e:	4c ec       	ldi	r20, 0xCC	; 204
 250:	5d e3       	ldi	r21, 0x3D	; 61
 252:	c5 01       	movw	r24, r10
 254:	b4 01       	movw	r22, r8
 256:	0e 94 a8 03 	call	0x750	; 0x750 <__mulsf3>
 25a:	4b 01       	movw	r8, r22
 25c:	5c 01       	movw	r10, r24
 25e:	2a e0       	ldi	r18, 0x0A	; 10
 260:	37 ed       	ldi	r19, 0xD7	; 215
 262:	43 e2       	ldi	r20, 0x23	; 35
 264:	5c e3       	ldi	r21, 0x3C	; 60
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	0e 94 a8 03 	call	0x750	; 0x750 <__mulsf3>
 26e:	9b 01       	movw	r18, r22
 270:	ac 01       	movw	r20, r24
 272:	c5 01       	movw	r24, r10
 274:	b4 01       	movw	r22, r8
 276:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3>
 27a:	0e 94 df 02 	call	0x5be	; 0x5be <__fixsfsi>
 27e:	eb 01       	movw	r28, r22
	if (PWM_signal > (255 * 0.73))
 280:	07 2e       	mov	r0, r23
 282:	00 0c       	add	r0, r0
 284:	88 0b       	sbc	r24, r24
 286:	99 0b       	sbc	r25, r25
 288:	0e 94 17 03 	call	0x62e	; 0x62e <__floatsisf>
 28c:	27 e6       	ldi	r18, 0x67	; 103
 28e:	36 e2       	ldi	r19, 0x26	; 38
 290:	4a e3       	ldi	r20, 0x3A	; 58
 292:	53 e4       	ldi	r21, 0x43	; 67
 294:	0e 94 a3 03 	call	0x746	; 0x746 <__gesf2>
 298:	18 16       	cp	r1, r24
 29a:	1c f0       	brlt	.+6      	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
	{
		PWM_signal = (255 * 0.73);
	}
	else if (PWM_signal < 0)
 29c:	dd 23       	and	r29, r29
 29e:	34 f4       	brge	.+12     	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
	int error = (C_temp - T_temp);
	integral = integral + error;
	int PWM_signal = (KP * error) + (KI * integral);
	if (PWM_signal > (255 * 0.73))
	{
		PWM_signal = (255 * 0.73);
 2a2:	ca eb       	ldi	r28, 0xBA	; 186
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
	}
	else if (PWM_signal < 0)
	{
		PWM_signal = 0;
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
	}
	C_temp = C_temp - PWM_signal;
	return C_temp;
	
 2ac:	c8 01       	movw	r24, r16
 2ae:	8c 1b       	sub	r24, r28
 2b0:	9d 0b       	sbc	r25, r29
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	bf 90       	pop	r11
 2c4:	af 90       	pop	r10
 2c6:	9f 90       	pop	r9
 2c8:	8f 90       	pop	r8
 2ca:	08 95       	ret

000002cc <INITIALZIE_PWM_TIMER>:
	2- set prescaler value
	
	*/ 
	
	// Set Compare Value
	OCR0  = (((duty*256))/100); // Set Compare Value
 2cc:	98 2f       	mov	r25, r24
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	64 e6       	ldi	r22, 0x64	; 100
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 2d8:	6c bf       	out	0x3c, r22	; 60
	//OCR0 = (uint8_t)duty; 
	
	// configure TCCR0 reg -- TIMER 0
	TCCR0 = (1<<WGM00) | (1<<WGM01) |  (1<<COM01) | (1 <<CS01); 
 2da:	8a e6       	ldi	r24, 0x6A	; 106
 2dc:	83 bf       	out	0x33, r24	; 51
	//TCCR0 =(uint8_t) ((uint8_t) (((uint8_t)1)<<WGM00) |(uint8_t) (((uint8_t)1)<<WGM01) |(uint8_t) (((uint8_t)1)<<COM01) |(uint8_t) (((uint8_t)1)<<CS01) );
	/* Set direction of PB3 bin output*/ 
	DDRB |= ((1)<<PB3);
 2de:	87 b3       	in	r24, 0x17	; 23
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	87 bb       	out	0x17, r24	; 23
	
	/* intialize 0 timer*/ 
	TCNT0 =  0;	
 2e4:	12 be       	out	0x32, r1	; 50
 2e6:	08 95       	ret

000002e8 <displayTemperature>:
#include <avr/io.h>
#include <util/delay.h>
#include "sevenSeg.h"

void displayTemperature(char msb, char lsb)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	60 97       	sbiw	r28, 0x10	; 16
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	28 2f       	mov	r18, r24
    // ssd is an array of 16 elements, each element is a byte
    char ssd[16] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,
 2fe:	80 e1       	ldi	r24, 0x10	; 16
 300:	e4 e6       	ldi	r30, 0x64	; 100
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	de 01       	movw	r26, r28
 306:	11 96       	adiw	r26, 0x01	; 1
 308:	01 90       	ld	r0, Z+
 30a:	0d 92       	st	X+, r0
 30c:	8a 95       	dec	r24
 30e:	e1 f7       	brne	.-8      	; 0x308 <displayTemperature+0x20>
                    0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};

    // sign is a char variable
    char sign;

    lsb >>= 6;
 310:	62 95       	swap	r22
 312:	66 95       	lsr	r22
 314:	66 95       	lsr	r22
 316:	63 70       	andi	r22, 0x03	; 3

    // if msb is negative
    if (msb & 0x80)
 318:	22 23       	and	r18, r18
 31a:	54 f4       	brge	.+20     	; 0x330 <displayTemperature+0x48>
    {
        msb = (~msb) + 1;
 31c:	21 95       	neg	r18
        sign = 1;

        if (lsb != 0)
 31e:	66 23       	and	r22, r22
 320:	69 f0       	breq	.+26     	; 0x33c <displayTemperature+0x54>
            lsb = 75 / lsb;
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	8b e4       	ldi	r24, 0x4B	; 75
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>

    // if msb is negative
    if (msb & 0x80)
    {
        msb = (~msb) + 1;
        sign = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	07 c0       	rjmp	.+14     	; 0x33e <displayTemperature+0x56>
            lsb = 75 / lsb;
    }
    else
    {
        sign = 0;
        lsb *= 25;
 330:	89 e1       	ldi	r24, 0x19	; 25
 332:	68 9f       	mul	r22, r24
 334:	60 2d       	mov	r22, r0
 336:	11 24       	eor	r1, r1
        if (lsb != 0)
            lsb = 75 / lsb;
    }
    else
    {
        sign = 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	01 c0       	rjmp	.+2      	; 0x33e <displayTemperature+0x56>

    // if msb is negative
    if (msb & 0x80)
    {
        msb = (~msb) + 1;
        sign = 1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
    {
        sign = 0;
        lsb *= 25;
    }

    PORTD = 0x00;
 33e:	12 ba       	out	0x12, r1	; 18
    if (sign == 1)
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	19 f4       	brne	.+6      	; 0x34a <displayTemperature+0x62>
        PORTC = 0x40;
 344:	80 e4       	ldi	r24, 0x40	; 64
 346:	85 bb       	out	0x15, r24	; 21
 348:	12 c0       	rjmp	.+36     	; 0x36e <displayTemperature+0x86>
    else if (msb >= 100)
 34a:	24 36       	cpi	r18, 0x64	; 100
 34c:	78 f0       	brcs	.+30     	; 0x36c <displayTemperature+0x84>
        PORTC = ssd[msb / 100];
 34e:	89 e2       	ldi	r24, 0x29	; 41
 350:	28 9f       	mul	r18, r24
 352:	81 2d       	mov	r24, r1
 354:	11 24       	eor	r1, r1
 356:	82 95       	swap	r24
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	e1 e0       	ldi	r30, 0x01	; 1
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	ec 0f       	add	r30, r28
 360:	fd 1f       	adc	r31, r29
 362:	e8 0f       	add	r30, r24
 364:	f1 1d       	adc	r31, r1
 366:	80 81       	ld	r24, Z
 368:	85 bb       	out	0x15, r24	; 21
 36a:	01 c0       	rjmp	.+2      	; 0x36e <displayTemperature+0x86>
    else
        PORTC = 0x00;
 36c:	15 ba       	out	0x15, r1	; 21
    PORTD = (1 << 0);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	82 bb       	out	0x12, r24	; 18
 372:	81 ee       	ldi	r24, 0xE1	; 225
 374:	94 e0       	ldi	r25, 0x04	; 4
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <displayTemperature+0x8e>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <displayTemperature+0x94>
 37c:	00 00       	nop
    _delay_ms(5);

    PORTD = 0x00;
 37e:	12 ba       	out	0x12, r1	; 18
    if (msb >= 10)
 380:	2a 30       	cpi	r18, 0x0A	; 10
 382:	d8 f0       	brcs	.+54     	; 0x3ba <displayTemperature+0xd2>
        PORTC = ssd[(msb % 100) / 10];
 384:	89 e2       	ldi	r24, 0x29	; 41
 386:	28 9f       	mul	r18, r24
 388:	81 2d       	mov	r24, r1
 38a:	11 24       	eor	r1, r1
 38c:	82 95       	swap	r24
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	e2 2f       	mov	r30, r18
 392:	94 e6       	ldi	r25, 0x64	; 100
 394:	89 9f       	mul	r24, r25
 396:	e0 19       	sub	r30, r0
 398:	11 24       	eor	r1, r1
 39a:	9d ec       	ldi	r25, 0xCD	; 205
 39c:	e9 9f       	mul	r30, r25
 39e:	81 2d       	mov	r24, r1
 3a0:	11 24       	eor	r1, r1
 3a2:	86 95       	lsr	r24
 3a4:	86 95       	lsr	r24
 3a6:	86 95       	lsr	r24
 3a8:	e1 e0       	ldi	r30, 0x01	; 1
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ec 0f       	add	r30, r28
 3ae:	fd 1f       	adc	r31, r29
 3b0:	e8 0f       	add	r30, r24
 3b2:	f1 1d       	adc	r31, r1
 3b4:	80 81       	ld	r24, Z
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <displayTemperature+0xd4>
    else
        PORTC = 0;
 3ba:	15 ba       	out	0x15, r1	; 21
    PORTD = (1 << 1);
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	82 bb       	out	0x12, r24	; 18
 3c0:	81 ee       	ldi	r24, 0xE1	; 225
 3c2:	94 e0       	ldi	r25, 0x04	; 4
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <displayTemperature+0xdc>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <displayTemperature+0xe2>
 3ca:	00 00       	nop
    _delay_ms(5);

    PORTD = 0x00;
 3cc:	12 ba       	out	0x12, r1	; 18
    PORTC = ssd[msb % 10] | 0x80;
 3ce:	8d ec       	ldi	r24, 0xCD	; 205
 3d0:	28 9f       	mul	r18, r24
 3d2:	91 2d       	mov	r25, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	96 95       	lsr	r25
 3d8:	96 95       	lsr	r25
 3da:	96 95       	lsr	r25
 3dc:	99 0f       	add	r25, r25
 3de:	39 2f       	mov	r19, r25
 3e0:	33 0f       	add	r19, r19
 3e2:	33 0f       	add	r19, r19
 3e4:	93 0f       	add	r25, r19
 3e6:	29 1b       	sub	r18, r25
 3e8:	e1 e0       	ldi	r30, 0x01	; 1
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ec 0f       	add	r30, r28
 3ee:	fd 1f       	adc	r31, r29
 3f0:	e2 0f       	add	r30, r18
 3f2:	f1 1d       	adc	r31, r1
 3f4:	90 81       	ld	r25, Z
 3f6:	90 68       	ori	r25, 0x80	; 128
 3f8:	95 bb       	out	0x15, r25	; 21
    PORTD = (1 << 2);
 3fa:	94 e0       	ldi	r25, 0x04	; 4
 3fc:	92 bb       	out	0x12, r25	; 18
 3fe:	e1 ee       	ldi	r30, 0xE1	; 225
 400:	f4 e0       	ldi	r31, 0x04	; 4
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 408:	00 00       	nop
    _delay_ms(5);

    PORTD = 0x00;
 40a:	12 ba       	out	0x12, r1	; 18
    PORTC = ssd[lsb / 10];
 40c:	68 9f       	mul	r22, r24
 40e:	81 2d       	mov	r24, r1
 410:	11 24       	eor	r1, r1
 412:	86 95       	lsr	r24
 414:	86 95       	lsr	r24
 416:	86 95       	lsr	r24
 418:	e1 e0       	ldi	r30, 0x01	; 1
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ec 0f       	add	r30, r28
 41e:	fd 1f       	adc	r31, r29
 420:	e8 0f       	add	r30, r24
 422:	f1 1d       	adc	r31, r1
 424:	90 81       	ld	r25, Z
 426:	95 bb       	out	0x15, r25	; 21
    PORTD = (1 << 3);
 428:	98 e0       	ldi	r25, 0x08	; 8
 42a:	92 bb       	out	0x12, r25	; 18
 42c:	e1 ee       	ldi	r30, 0xE1	; 225
 42e:	f4 e0       	ldi	r31, 0x04	; 4
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 436:	00 00       	nop
    _delay_ms(5);

    PORTD = 0x00;
 438:	12 ba       	out	0x12, r1	; 18
    PORTC = ssd[lsb % 10];
 43a:	88 0f       	add	r24, r24
 43c:	98 2f       	mov	r25, r24
 43e:	99 0f       	add	r25, r25
 440:	99 0f       	add	r25, r25
 442:	89 0f       	add	r24, r25
 444:	68 1b       	sub	r22, r24
 446:	e1 e0       	ldi	r30, 0x01	; 1
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	e6 0f       	add	r30, r22
 450:	f1 1d       	adc	r31, r1
 452:	80 81       	ld	r24, Z
 454:	85 bb       	out	0x15, r24	; 21
    PORTD = (1 << 4);
 456:	80 e1       	ldi	r24, 0x10	; 16
 458:	82 bb       	out	0x12, r24	; 18
 45a:	81 ee       	ldi	r24, 0xE1	; 225
 45c:	94 e0       	ldi	r25, 0x04	; 4
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__stack+0x5>
 464:	00 00       	nop
    _delay_ms(5);

    PORTD = 0x00;
 466:	12 ba       	out	0x12, r1	; 18
    PORTC = 0x63;
 468:	83 e6       	ldi	r24, 0x63	; 99
 46a:	85 bb       	out	0x15, r24	; 21
    PORTD = (1 << 5);
 46c:	80 e2       	ldi	r24, 0x20	; 32
 46e:	82 bb       	out	0x12, r24	; 18
 470:	e1 ee       	ldi	r30, 0xE1	; 225
 472:	f4 e0       	ldi	r31, 0x04	; 4
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__stack+0x15>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__stack+0x1b>
 47a:	00 00       	nop
    _delay_ms(5);

    PORTD = 0x00;
 47c:	12 ba       	out	0x12, r1	; 18
    PORTC = ssd[12];
 47e:	8d 85       	ldd	r24, Y+13	; 0x0d
 480:	85 bb       	out	0x15, r24	; 21
    PORTD = (1 << 6);
 482:	80 e4       	ldi	r24, 0x40	; 64
 484:	82 bb       	out	0x12, r24	; 18
 486:	81 ee       	ldi	r24, 0xE1	; 225
 488:	94 e0       	ldi	r25, 0x04	; 4
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__stack+0x31>
 490:	00 00       	nop
    _delay_ms(5);
}
 492:	60 96       	adiw	r28, 0x10	; 16
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <masterInit>:
#include "SPI.h"

void masterInit(void)
{
	/*Set MOSI, SCK and SS Output*/
	DDRB = (1 << 7) | (1 << 5) | (1 << 4);
 4a4:	80 eb       	ldi	r24, 0xB0	; 176
 4a6:	87 bb       	out	0x17, r24	; 23
	/*Enable SPI Master set clock rate fck/128 data is
	sample at falling edge*/
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0) | (1 << CPHA);
 4a8:	87 e5       	ldi	r24, 0x57	; 87
 4aa:	8d b9       	out	0x0d, r24	; 13
 4ac:	08 95       	ret

000004ae <masterTransmit>:

void masterTransmit(char spiData)
{
	// PORTB&=~(1<<5);
	/*Start the transmission*/
	SPDR = spiData;
 4ae:	8f b9       	out	0x0f, r24	; 15
	/*Wait for completion*/
	while (!(SPSR & (1 << SPIF)))
 4b0:	77 9b       	sbis	0x0e, 7	; 14
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <masterTransmit+0x2>
		;
	// PORTB&=~(1<<5);
}
 4b4:	08 95       	ret

000004b6 <masterReceive>:

char masterReceive(void)
{
	/*Wait for the SPI buffer's full*/
	while (!(SPSR & (1 << SPIF)))
 4b6:	77 9b       	sbis	0x0e, 7	; 14
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <masterReceive>
		;
	/*return SPI Buffer*/
	return SPDR;
 4ba:	8f b1       	in	r24, 0x0f	; 15
 4bc:	08 95       	ret

000004be <tc72Init>:
#include "SPI.h"
#include "TC72.h"

void tc72Init(void)
{
    PORTB |= (1 << 4);
 4be:	88 b3       	in	r24, 0x18	; 24
 4c0:	80 61       	ori	r24, 0x10	; 16
 4c2:	88 bb       	out	0x18, r24	; 24
    /*Select Control Register*/
    masterTransmit(0x80);
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	0e 94 57 02 	call	0x4ae	; 0x4ae <masterTransmit>
    /*Select Continuous temperature Conversion*/
    masterTransmit(0x04);
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	0e 94 57 02 	call	0x4ae	; 0x4ae <masterTransmit>
    PORTB &= ~(1 << 4);
 4d0:	88 b3       	in	r24, 0x18	; 24
 4d2:	8f 7e       	andi	r24, 0xEF	; 239
 4d4:	88 bb       	out	0x18, r24	; 24
 4d6:	8b e7       	ldi	r24, 0x7B	; 123
 4d8:	92 e9       	ldi	r25, 0x92	; 146
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <tc72Init+0x1c>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <tc72Init+0x22>
 4e0:	00 00       	nop
 4e2:	08 95       	ret

000004e4 <__subsf3>:
 4e4:	50 58       	subi	r21, 0x80	; 128

000004e6 <__addsf3>:
 4e6:	bb 27       	eor	r27, r27
 4e8:	aa 27       	eor	r26, r26
 4ea:	0e 94 8a 02 	call	0x514	; 0x514 <__addsf3x>
 4ee:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_round>
 4f2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 4f6:	38 f0       	brcs	.+14     	; 0x506 <__addsf3+0x20>
 4f8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 4fc:	20 f0       	brcs	.+8      	; 0x506 <__addsf3+0x20>
 4fe:	39 f4       	brne	.+14     	; 0x50e <__addsf3+0x28>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	19 f4       	brne	.+6      	; 0x50a <__addsf3+0x24>
 504:	26 f4       	brtc	.+8      	; 0x50e <__addsf3+0x28>
 506:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_nan>
 50a:	0e f4       	brtc	.+2      	; 0x50e <__addsf3+0x28>
 50c:	e0 95       	com	r30
 50e:	e7 fb       	bst	r30, 7
 510:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>

00000514 <__addsf3x>:
 514:	e9 2f       	mov	r30, r25
 516:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_split3>
 51a:	58 f3       	brcs	.-42     	; 0x4f2 <__addsf3+0xc>
 51c:	ba 17       	cp	r27, r26
 51e:	62 07       	cpc	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	95 07       	cpc	r25, r21
 526:	20 f0       	brcs	.+8      	; 0x530 <__addsf3x+0x1c>
 528:	79 f4       	brne	.+30     	; 0x548 <__addsf3x+0x34>
 52a:	a6 f5       	brtc	.+104    	; 0x594 <__addsf3x+0x80>
 52c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_zero>
 530:	0e f4       	brtc	.+2      	; 0x534 <__addsf3x+0x20>
 532:	e0 95       	com	r30
 534:	0b 2e       	mov	r0, r27
 536:	ba 2f       	mov	r27, r26
 538:	a0 2d       	mov	r26, r0
 53a:	0b 01       	movw	r0, r22
 53c:	b9 01       	movw	r22, r18
 53e:	90 01       	movw	r18, r0
 540:	0c 01       	movw	r0, r24
 542:	ca 01       	movw	r24, r20
 544:	a0 01       	movw	r20, r0
 546:	11 24       	eor	r1, r1
 548:	ff 27       	eor	r31, r31
 54a:	59 1b       	sub	r21, r25
 54c:	99 f0       	breq	.+38     	; 0x574 <__addsf3x+0x60>
 54e:	59 3f       	cpi	r21, 0xF9	; 249
 550:	50 f4       	brcc	.+20     	; 0x566 <__addsf3x+0x52>
 552:	50 3e       	cpi	r21, 0xE0	; 224
 554:	68 f1       	brcs	.+90     	; 0x5b0 <__addsf3x+0x9c>
 556:	1a 16       	cp	r1, r26
 558:	f0 40       	sbci	r31, 0x00	; 0
 55a:	a2 2f       	mov	r26, r18
 55c:	23 2f       	mov	r18, r19
 55e:	34 2f       	mov	r19, r20
 560:	44 27       	eor	r20, r20
 562:	58 5f       	subi	r21, 0xF8	; 248
 564:	f3 cf       	rjmp	.-26     	; 0x54c <__addsf3x+0x38>
 566:	46 95       	lsr	r20
 568:	37 95       	ror	r19
 56a:	27 95       	ror	r18
 56c:	a7 95       	ror	r26
 56e:	f0 40       	sbci	r31, 0x00	; 0
 570:	53 95       	inc	r21
 572:	c9 f7       	brne	.-14     	; 0x566 <__addsf3x+0x52>
 574:	7e f4       	brtc	.+30     	; 0x594 <__addsf3x+0x80>
 576:	1f 16       	cp	r1, r31
 578:	ba 0b       	sbc	r27, r26
 57a:	62 0b       	sbc	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	ba f0       	brmi	.+46     	; 0x5b0 <__addsf3x+0x9c>
 582:	91 50       	subi	r25, 0x01	; 1
 584:	a1 f0       	breq	.+40     	; 0x5ae <__addsf3x+0x9a>
 586:	ff 0f       	add	r31, r31
 588:	bb 1f       	adc	r27, r27
 58a:	66 1f       	adc	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	88 1f       	adc	r24, r24
 590:	c2 f7       	brpl	.-16     	; 0x582 <__addsf3x+0x6e>
 592:	0e c0       	rjmp	.+28     	; 0x5b0 <__addsf3x+0x9c>
 594:	ba 0f       	add	r27, r26
 596:	62 1f       	adc	r22, r18
 598:	73 1f       	adc	r23, r19
 59a:	84 1f       	adc	r24, r20
 59c:	48 f4       	brcc	.+18     	; 0x5b0 <__addsf3x+0x9c>
 59e:	87 95       	ror	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b7 95       	ror	r27
 5a6:	f7 95       	ror	r31
 5a8:	9e 3f       	cpi	r25, 0xFE	; 254
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <__addsf3x+0x9a>
 5ac:	b0 cf       	rjmp	.-160    	; 0x50e <__addsf3+0x28>
 5ae:	93 95       	inc	r25
 5b0:	88 0f       	add	r24, r24
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <__addsf3x+0xa2>
 5b4:	99 27       	eor	r25, r25
 5b6:	ee 0f       	add	r30, r30
 5b8:	97 95       	ror	r25
 5ba:	87 95       	ror	r24
 5bc:	08 95       	ret

000005be <__fixsfsi>:
 5be:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fixunssfsi>
 5c2:	68 94       	set
 5c4:	b1 11       	cpse	r27, r1
 5c6:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>
 5ca:	08 95       	ret

000005cc <__fixunssfsi>:
 5cc:	0e 94 82 03 	call	0x704	; 0x704 <__fp_splitA>
 5d0:	88 f0       	brcs	.+34     	; 0x5f4 <__fixunssfsi+0x28>
 5d2:	9f 57       	subi	r25, 0x7F	; 127
 5d4:	98 f0       	brcs	.+38     	; 0x5fc <__fixunssfsi+0x30>
 5d6:	b9 2f       	mov	r27, r25
 5d8:	99 27       	eor	r25, r25
 5da:	b7 51       	subi	r27, 0x17	; 23
 5dc:	b0 f0       	brcs	.+44     	; 0x60a <__fixunssfsi+0x3e>
 5de:	e1 f0       	breq	.+56     	; 0x618 <__fixunssfsi+0x4c>
 5e0:	66 0f       	add	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	88 1f       	adc	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	1a f0       	brmi	.+6      	; 0x5f0 <__fixunssfsi+0x24>
 5ea:	ba 95       	dec	r27
 5ec:	c9 f7       	brne	.-14     	; 0x5e0 <__fixunssfsi+0x14>
 5ee:	14 c0       	rjmp	.+40     	; 0x618 <__fixunssfsi+0x4c>
 5f0:	b1 30       	cpi	r27, 0x01	; 1
 5f2:	91 f0       	breq	.+36     	; 0x618 <__fixunssfsi+0x4c>
 5f4:	0e 94 9c 03 	call	0x738	; 0x738 <__fp_zero>
 5f8:	b1 e0       	ldi	r27, 0x01	; 1
 5fa:	08 95       	ret
 5fc:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_zero>
 600:	67 2f       	mov	r22, r23
 602:	78 2f       	mov	r23, r24
 604:	88 27       	eor	r24, r24
 606:	b8 5f       	subi	r27, 0xF8	; 248
 608:	39 f0       	breq	.+14     	; 0x618 <__fixunssfsi+0x4c>
 60a:	b9 3f       	cpi	r27, 0xF9	; 249
 60c:	cc f3       	brlt	.-14     	; 0x600 <__fixunssfsi+0x34>
 60e:	86 95       	lsr	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	b3 95       	inc	r27
 616:	d9 f7       	brne	.-10     	; 0x60e <__fixunssfsi+0x42>
 618:	3e f4       	brtc	.+14     	; 0x628 <__fixunssfsi+0x5c>
 61a:	90 95       	com	r25
 61c:	80 95       	com	r24
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	08 95       	ret

0000062a <__floatunsisf>:
 62a:	e8 94       	clt
 62c:	09 c0       	rjmp	.+18     	; 0x640 <__floatsisf+0x12>

0000062e <__floatsisf>:
 62e:	97 fb       	bst	r25, 7
 630:	3e f4       	brtc	.+14     	; 0x640 <__floatsisf+0x12>
 632:	90 95       	com	r25
 634:	80 95       	com	r24
 636:	70 95       	com	r23
 638:	61 95       	neg	r22
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	8f 4f       	sbci	r24, 0xFF	; 255
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	99 23       	and	r25, r25
 642:	a9 f0       	breq	.+42     	; 0x66e <__floatsisf+0x40>
 644:	f9 2f       	mov	r31, r25
 646:	96 e9       	ldi	r25, 0x96	; 150
 648:	bb 27       	eor	r27, r27
 64a:	93 95       	inc	r25
 64c:	f6 95       	lsr	r31
 64e:	87 95       	ror	r24
 650:	77 95       	ror	r23
 652:	67 95       	ror	r22
 654:	b7 95       	ror	r27
 656:	f1 11       	cpse	r31, r1
 658:	f8 cf       	rjmp	.-16     	; 0x64a <__floatsisf+0x1c>
 65a:	fa f4       	brpl	.+62     	; 0x69a <__floatsisf+0x6c>
 65c:	bb 0f       	add	r27, r27
 65e:	11 f4       	brne	.+4      	; 0x664 <__floatsisf+0x36>
 660:	60 ff       	sbrs	r22, 0
 662:	1b c0       	rjmp	.+54     	; 0x69a <__floatsisf+0x6c>
 664:	6f 5f       	subi	r22, 0xFF	; 255
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	16 c0       	rjmp	.+44     	; 0x69a <__floatsisf+0x6c>
 66e:	88 23       	and	r24, r24
 670:	11 f0       	breq	.+4      	; 0x676 <__floatsisf+0x48>
 672:	96 e9       	ldi	r25, 0x96	; 150
 674:	11 c0       	rjmp	.+34     	; 0x698 <__floatsisf+0x6a>
 676:	77 23       	and	r23, r23
 678:	21 f0       	breq	.+8      	; 0x682 <__floatsisf+0x54>
 67a:	9e e8       	ldi	r25, 0x8E	; 142
 67c:	87 2f       	mov	r24, r23
 67e:	76 2f       	mov	r23, r22
 680:	05 c0       	rjmp	.+10     	; 0x68c <__floatsisf+0x5e>
 682:	66 23       	and	r22, r22
 684:	71 f0       	breq	.+28     	; 0x6a2 <__floatsisf+0x74>
 686:	96 e8       	ldi	r25, 0x86	; 134
 688:	86 2f       	mov	r24, r22
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	2a f0       	brmi	.+10     	; 0x69a <__floatsisf+0x6c>
 690:	9a 95       	dec	r25
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	da f7       	brpl	.-10     	; 0x690 <__floatsisf+0x62>
 69a:	88 0f       	add	r24, r24
 69c:	96 95       	lsr	r25
 69e:	87 95       	ror	r24
 6a0:	97 f9       	bld	r25, 7
 6a2:	08 95       	ret

000006a4 <__fp_inf>:
 6a4:	97 f9       	bld	r25, 7
 6a6:	9f 67       	ori	r25, 0x7F	; 127
 6a8:	80 e8       	ldi	r24, 0x80	; 128
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	08 95       	ret

000006b0 <__fp_nan>:
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	80 ec       	ldi	r24, 0xC0	; 192
 6b4:	08 95       	ret

000006b6 <__fp_pscA>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	16 16       	cp	r1, r22
 6bc:	17 06       	cpc	r1, r23
 6be:	18 06       	cpc	r1, r24
 6c0:	09 06       	cpc	r0, r25
 6c2:	08 95       	ret

000006c4 <__fp_pscB>:
 6c4:	00 24       	eor	r0, r0
 6c6:	0a 94       	dec	r0
 6c8:	12 16       	cp	r1, r18
 6ca:	13 06       	cpc	r1, r19
 6cc:	14 06       	cpc	r1, r20
 6ce:	05 06       	cpc	r0, r21
 6d0:	08 95       	ret

000006d2 <__fp_round>:
 6d2:	09 2e       	mov	r0, r25
 6d4:	03 94       	inc	r0
 6d6:	00 0c       	add	r0, r0
 6d8:	11 f4       	brne	.+4      	; 0x6de <__fp_round+0xc>
 6da:	88 23       	and	r24, r24
 6dc:	52 f0       	brmi	.+20     	; 0x6f2 <__fp_round+0x20>
 6de:	bb 0f       	add	r27, r27
 6e0:	40 f4       	brcc	.+16     	; 0x6f2 <__fp_round+0x20>
 6e2:	bf 2b       	or	r27, r31
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__fp_round+0x18>
 6e6:	60 ff       	sbrs	r22, 0
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fp_round+0x20>
 6ea:	6f 5f       	subi	r22, 0xFF	; 255
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__fp_split3>:
 6f4:	57 fd       	sbrc	r21, 7
 6f6:	90 58       	subi	r25, 0x80	; 128
 6f8:	44 0f       	add	r20, r20
 6fa:	55 1f       	adc	r21, r21
 6fc:	59 f0       	breq	.+22     	; 0x714 <__fp_splitA+0x10>
 6fe:	5f 3f       	cpi	r21, 0xFF	; 255
 700:	71 f0       	breq	.+28     	; 0x71e <__fp_splitA+0x1a>
 702:	47 95       	ror	r20

00000704 <__fp_splitA>:
 704:	88 0f       	add	r24, r24
 706:	97 fb       	bst	r25, 7
 708:	99 1f       	adc	r25, r25
 70a:	61 f0       	breq	.+24     	; 0x724 <__fp_splitA+0x20>
 70c:	9f 3f       	cpi	r25, 0xFF	; 255
 70e:	79 f0       	breq	.+30     	; 0x72e <__fp_splitA+0x2a>
 710:	87 95       	ror	r24
 712:	08 95       	ret
 714:	12 16       	cp	r1, r18
 716:	13 06       	cpc	r1, r19
 718:	14 06       	cpc	r1, r20
 71a:	55 1f       	adc	r21, r21
 71c:	f2 cf       	rjmp	.-28     	; 0x702 <__fp_split3+0xe>
 71e:	46 95       	lsr	r20
 720:	f1 df       	rcall	.-30     	; 0x704 <__fp_splitA>
 722:	08 c0       	rjmp	.+16     	; 0x734 <__fp_splitA+0x30>
 724:	16 16       	cp	r1, r22
 726:	17 06       	cpc	r1, r23
 728:	18 06       	cpc	r1, r24
 72a:	99 1f       	adc	r25, r25
 72c:	f1 cf       	rjmp	.-30     	; 0x710 <__fp_splitA+0xc>
 72e:	86 95       	lsr	r24
 730:	71 05       	cpc	r23, r1
 732:	61 05       	cpc	r22, r1
 734:	08 94       	sec
 736:	08 95       	ret

00000738 <__fp_zero>:
 738:	e8 94       	clt

0000073a <__fp_szero>:
 73a:	bb 27       	eor	r27, r27
 73c:	66 27       	eor	r22, r22
 73e:	77 27       	eor	r23, r23
 740:	cb 01       	movw	r24, r22
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__gesf2>:
 746:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_cmp>
 74a:	08 f4       	brcc	.+2      	; 0x74e <__gesf2+0x8>
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__mulsf3>:
 750:	0e 94 bb 03 	call	0x776	; 0x776 <__mulsf3x>
 754:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_round>
 758:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 75c:	38 f0       	brcs	.+14     	; 0x76c <__mulsf3+0x1c>
 75e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 762:	20 f0       	brcs	.+8      	; 0x76c <__mulsf3+0x1c>
 764:	95 23       	and	r25, r21
 766:	11 f0       	breq	.+4      	; 0x76c <__mulsf3+0x1c>
 768:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 76c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_nan>
 770:	11 24       	eor	r1, r1
 772:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>

00000776 <__mulsf3x>:
 776:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_split3>
 77a:	70 f3       	brcs	.-36     	; 0x758 <__mulsf3+0x8>

0000077c <__mulsf3_pse>:
 77c:	95 9f       	mul	r25, r21
 77e:	c1 f3       	breq	.-16     	; 0x770 <__mulsf3+0x20>
 780:	95 0f       	add	r25, r21
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	55 1f       	adc	r21, r21
 786:	62 9f       	mul	r22, r18
 788:	f0 01       	movw	r30, r0
 78a:	72 9f       	mul	r23, r18
 78c:	bb 27       	eor	r27, r27
 78e:	f0 0d       	add	r31, r0
 790:	b1 1d       	adc	r27, r1
 792:	63 9f       	mul	r22, r19
 794:	aa 27       	eor	r26, r26
 796:	f0 0d       	add	r31, r0
 798:	b1 1d       	adc	r27, r1
 79a:	aa 1f       	adc	r26, r26
 79c:	64 9f       	mul	r22, r20
 79e:	66 27       	eor	r22, r22
 7a0:	b0 0d       	add	r27, r0
 7a2:	a1 1d       	adc	r26, r1
 7a4:	66 1f       	adc	r22, r22
 7a6:	82 9f       	mul	r24, r18
 7a8:	22 27       	eor	r18, r18
 7aa:	b0 0d       	add	r27, r0
 7ac:	a1 1d       	adc	r26, r1
 7ae:	62 1f       	adc	r22, r18
 7b0:	73 9f       	mul	r23, r19
 7b2:	b0 0d       	add	r27, r0
 7b4:	a1 1d       	adc	r26, r1
 7b6:	62 1f       	adc	r22, r18
 7b8:	83 9f       	mul	r24, r19
 7ba:	a0 0d       	add	r26, r0
 7bc:	61 1d       	adc	r22, r1
 7be:	22 1f       	adc	r18, r18
 7c0:	74 9f       	mul	r23, r20
 7c2:	33 27       	eor	r19, r19
 7c4:	a0 0d       	add	r26, r0
 7c6:	61 1d       	adc	r22, r1
 7c8:	23 1f       	adc	r18, r19
 7ca:	84 9f       	mul	r24, r20
 7cc:	60 0d       	add	r22, r0
 7ce:	21 1d       	adc	r18, r1
 7d0:	82 2f       	mov	r24, r18
 7d2:	76 2f       	mov	r23, r22
 7d4:	6a 2f       	mov	r22, r26
 7d6:	11 24       	eor	r1, r1
 7d8:	9f 57       	subi	r25, 0x7F	; 127
 7da:	50 40       	sbci	r21, 0x00	; 0
 7dc:	9a f0       	brmi	.+38     	; 0x804 <__mulsf3_pse+0x88>
 7de:	f1 f0       	breq	.+60     	; 0x81c <__mulsf3_pse+0xa0>
 7e0:	88 23       	and	r24, r24
 7e2:	4a f0       	brmi	.+18     	; 0x7f6 <__mulsf3_pse+0x7a>
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31
 7e8:	bb 1f       	adc	r27, r27
 7ea:	66 1f       	adc	r22, r22
 7ec:	77 1f       	adc	r23, r23
 7ee:	88 1f       	adc	r24, r24
 7f0:	91 50       	subi	r25, 0x01	; 1
 7f2:	50 40       	sbci	r21, 0x00	; 0
 7f4:	a9 f7       	brne	.-22     	; 0x7e0 <__mulsf3_pse+0x64>
 7f6:	9e 3f       	cpi	r25, 0xFE	; 254
 7f8:	51 05       	cpc	r21, r1
 7fa:	80 f0       	brcs	.+32     	; 0x81c <__mulsf3_pse+0xa0>
 7fc:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 800:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	e4 f3       	brlt	.-8      	; 0x800 <__mulsf3_pse+0x84>
 808:	98 3e       	cpi	r25, 0xE8	; 232
 80a:	d4 f3       	brlt	.-12     	; 0x800 <__mulsf3_pse+0x84>
 80c:	86 95       	lsr	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b7 95       	ror	r27
 814:	f7 95       	ror	r31
 816:	e7 95       	ror	r30
 818:	9f 5f       	subi	r25, 0xFF	; 255
 81a:	c1 f7       	brne	.-16     	; 0x80c <__mulsf3_pse+0x90>
 81c:	fe 2b       	or	r31, r30
 81e:	88 0f       	add	r24, r24
 820:	91 1d       	adc	r25, r1
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret

0000082a <__fp_cmp>:
 82a:	99 0f       	add	r25, r25
 82c:	00 08       	sbc	r0, r0
 82e:	55 0f       	add	r21, r21
 830:	aa 0b       	sbc	r26, r26
 832:	e0 e8       	ldi	r30, 0x80	; 128
 834:	fe ef       	ldi	r31, 0xFE	; 254
 836:	16 16       	cp	r1, r22
 838:	17 06       	cpc	r1, r23
 83a:	e8 07       	cpc	r30, r24
 83c:	f9 07       	cpc	r31, r25
 83e:	c0 f0       	brcs	.+48     	; 0x870 <__fp_cmp+0x46>
 840:	12 16       	cp	r1, r18
 842:	13 06       	cpc	r1, r19
 844:	e4 07       	cpc	r30, r20
 846:	f5 07       	cpc	r31, r21
 848:	98 f0       	brcs	.+38     	; 0x870 <__fp_cmp+0x46>
 84a:	62 1b       	sub	r22, r18
 84c:	73 0b       	sbc	r23, r19
 84e:	84 0b       	sbc	r24, r20
 850:	95 0b       	sbc	r25, r21
 852:	39 f4       	brne	.+14     	; 0x862 <__fp_cmp+0x38>
 854:	0a 26       	eor	r0, r26
 856:	61 f0       	breq	.+24     	; 0x870 <__fp_cmp+0x46>
 858:	23 2b       	or	r18, r19
 85a:	24 2b       	or	r18, r20
 85c:	25 2b       	or	r18, r21
 85e:	21 f4       	brne	.+8      	; 0x868 <__fp_cmp+0x3e>
 860:	08 95       	ret
 862:	0a 26       	eor	r0, r26
 864:	09 f4       	brne	.+2      	; 0x868 <__fp_cmp+0x3e>
 866:	a1 40       	sbci	r26, 0x01	; 1
 868:	a6 95       	lsr	r26
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	81 1d       	adc	r24, r1
 86e:	81 1d       	adc	r24, r1
 870:	08 95       	ret

00000872 <__divmodhi4>:
 872:	97 fb       	bst	r25, 7
 874:	07 2e       	mov	r0, r23
 876:	16 f4       	brtc	.+4      	; 0x87c <__divmodhi4+0xa>
 878:	00 94       	com	r0
 87a:	07 d0       	rcall	.+14     	; 0x88a <__divmodhi4_neg1>
 87c:	77 fd       	sbrc	r23, 7
 87e:	09 d0       	rcall	.+18     	; 0x892 <__divmodhi4_neg2>
 880:	0e 94 4d 04 	call	0x89a	; 0x89a <__udivmodhi4>
 884:	07 fc       	sbrc	r0, 7
 886:	05 d0       	rcall	.+10     	; 0x892 <__divmodhi4_neg2>
 888:	3e f4       	brtc	.+14     	; 0x898 <__divmodhi4_exit>

0000088a <__divmodhi4_neg1>:
 88a:	90 95       	com	r25
 88c:	81 95       	neg	r24
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	08 95       	ret

00000892 <__divmodhi4_neg2>:
 892:	70 95       	com	r23
 894:	61 95       	neg	r22
 896:	7f 4f       	sbci	r23, 0xFF	; 255

00000898 <__divmodhi4_exit>:
 898:	08 95       	ret

0000089a <__udivmodhi4>:
 89a:	aa 1b       	sub	r26, r26
 89c:	bb 1b       	sub	r27, r27
 89e:	51 e1       	ldi	r21, 0x11	; 17
 8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <__udivmodhi4_ep>

000008a2 <__udivmodhi4_loop>:
 8a2:	aa 1f       	adc	r26, r26
 8a4:	bb 1f       	adc	r27, r27
 8a6:	a6 17       	cp	r26, r22
 8a8:	b7 07       	cpc	r27, r23
 8aa:	10 f0       	brcs	.+4      	; 0x8b0 <__udivmodhi4_ep>
 8ac:	a6 1b       	sub	r26, r22
 8ae:	b7 0b       	sbc	r27, r23

000008b0 <__udivmodhi4_ep>:
 8b0:	88 1f       	adc	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	5a 95       	dec	r21
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <__udivmodhi4_loop>
 8b8:	80 95       	com	r24
 8ba:	90 95       	com	r25
 8bc:	bc 01       	movw	r22, r24
 8be:	cd 01       	movw	r24, r26
 8c0:	08 95       	ret

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
