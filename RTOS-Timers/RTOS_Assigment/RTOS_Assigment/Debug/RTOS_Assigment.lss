
RTOS_Assigment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000019ea  00001a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000660  00800080  00800080  00001a9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000515f  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001053  00000000  00000000  0000708b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c8b  00000000  00000000  000080de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db4  00000000  00000000  0000ad6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001833  00000000  00000000  0000bb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052cd  00000000  00000000  0000d353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00012620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_7>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	08 0c       	add	r0, r8
      56:	08 0c       	add	r0, r8
      58:	37 0c       	add	r3, r7
      5a:	3c 0c       	add	r3, r12
      5c:	52 0c       	add	r5, r2
      5e:	08 0c       	add	r0, r8
      60:	08 0c       	add	r0, r8
      62:	37 0c       	add	r3, r7
      64:	3c 0c       	add	r3, r12

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	ea ee       	ldi	r30, 0xEA	; 234
      7a:	f9 e1       	ldi	r31, 0x19	; 25
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a0 38       	cpi	r26, 0x80	; 128
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	26 e0       	ldi	r18, 0x06	; 6
      8a:	a0 e8       	ldi	r26, 0x80	; 128
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a0 3e       	cpi	r26, 0xE0	; 224
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
      9c:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <Task1_Func>:

	}
}

void Task1_Func(void)
{
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	00 d0       	rcall	.+0      	; 0xaa <Task1_Func+0x6>
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS( 20 );
	xLastWakeTime = xTaskGetTickCount();
      ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskGetTickCount>
      b2:	9a 83       	std	Y+2, r25	; 0x02
      b4:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		PORTC ^= (1u<<3);
      b6:	95 b3       	in	r25, 0x15	; 21
      b8:	88 e0       	ldi	r24, 0x08	; 8
      ba:	89 27       	eor	r24, r25
      bc:	85 bb       	out	0x15, r24	; 21
		//vTaskDelay( 20 );//pdMS_TO_TICKS( 20 )
		// PORTC ^= (1u<<5);
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
      be:	64 e1       	ldi	r22, 0x14	; 20
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	ce 01       	movw	r24, r28
      c4:	01 96       	adiw	r24, 0x01	; 1
      c6:	0e 94 cd 08 	call	0x119a	; 0x119a <xTaskDelayUntil>
      ca:	f5 cf       	rjmp	.-22     	; 0xb6 <Task1_Func+0x12>

000000cc <Task2_Func>:
	}
}

void Task2_Func(void)
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	00 d0       	rcall	.+0      	; 0xd2 <Task2_Func+0x6>
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS( 35 );
	xLastWakeTime = xTaskGetTickCount();
      d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskGetTickCount>
      da:	9a 83       	std	Y+2, r25	; 0x02
      dc:	89 83       	std	Y+1, r24	; 0x01
	// 	PORTC ^= (1u << 3);
	// 	vTaskDelayUntil(&xLastWakeTime, xPeriod);
	// }
	while (1)
	{
		PORTC ^= (1u<<4);
      de:	95 b3       	in	r25, 0x15	; 21
      e0:	80 e1       	ldi	r24, 0x10	; 16
      e2:	89 27       	eor	r24, r25
      e4:	85 bb       	out	0x15, r24	; 21
		//vTaskDelay( 50 );//pdMS_TO_TICKS( 20 )
		// PORTC ^= (1u<<5);
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
      e6:	63 e2       	ldi	r22, 0x23	; 35
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	ce 01       	movw	r24, r28
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	0e 94 cd 08 	call	0x119a	; 0x119a <xTaskDelayUntil>
      f2:	f5 cf       	rjmp	.-22     	; 0xde <Task2_Func+0x12>

000000f4 <Task3_Func>:
	}
}

void Task3_Func(void)
{
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	00 d0       	rcall	.+0      	; 0xfa <Task3_Func+0x6>
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS( 60 );
	xLastWakeTime = xTaskGetTickCount();
      fe:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskGetTickCount>
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01

	while (1)
	{
		PORTC ^= (1u<<5);
     106:	95 b3       	in	r25, 0x15	; 21
     108:	80 e2       	ldi	r24, 0x20	; 32
     10a:	89 27       	eor	r24, r25
     10c:	85 bb       	out	0x15, r24	; 21
		//vTaskDelay( 70 );//pdMS_TO_TICKS( 20 )
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
     10e:	6c e3       	ldi	r22, 0x3C	; 60
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	ce 01       	movw	r24, r28
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	0e 94 cd 08 	call	0x119a	; 0x119a <xTaskDelayUntil>
     11a:	f5 cf       	rjmp	.-22     	; 0x106 <Task3_Func+0x12>

0000011c <main>:
TaskHandle_t task3ptr;

int main(void)
{

	DDRC = 0xFF; // Configure all PORTC pins as output pins
     11c:	8f ef       	ldi	r24, 0xFF	; 255
     11e:	84 bb       	out	0x14, r24	; 20

	// TimerHandle_t xTimer = xTimerCreate("timer1",10,pdTRUE,1,Task1_Func);
	// xTimerStart(xTimer, 10 );

	xTaskCreate(Task1_Func, "Task1", configMINIMAL_STACK_SIZE, NULL, 0, &task1ptr);
     120:	0f 2e       	mov	r0, r31
     122:	fe ed       	ldi	r31, 0xDE	; 222
     124:	ef 2e       	mov	r14, r31
     126:	f6 e0       	ldi	r31, 0x06	; 6
     128:	ff 2e       	mov	r15, r31
     12a:	f0 2d       	mov	r31, r0
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	45 e5       	ldi	r20, 0x55	; 85
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	61 e6       	ldi	r22, 0x61	; 97
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	82 e5       	ldi	r24, 0x52	; 82
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xTaskCreate>
	xTaskCreate(Task2_Func, "Task2", configMINIMAL_STACK_SIZE, NULL, 0, &task2ptr);
     142:	0f 2e       	mov	r0, r31
     144:	fc ed       	ldi	r31, 0xDC	; 220
     146:	ef 2e       	mov	r14, r31
     148:	f6 e0       	ldi	r31, 0x06	; 6
     14a:	ff 2e       	mov	r15, r31
     14c:	f0 2d       	mov	r31, r0
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	45 e5       	ldi	r20, 0x55	; 85
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	67 e6       	ldi	r22, 0x67	; 103
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	86 e6       	ldi	r24, 0x66	; 102
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xTaskCreate>
	xTaskCreate(Task3_Func, "Task3", configMINIMAL_STACK_SIZE, NULL, 0, &task3ptr);
     162:	0f 2e       	mov	r0, r31
     164:	fa ed       	ldi	r31, 0xDA	; 218
     166:	ef 2e       	mov	r14, r31
     168:	f6 e0       	ldi	r31, 0x06	; 6
     16a:	ff 2e       	mov	r15, r31
     16c:	f0 2d       	mov	r31, r0
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	45 e5       	ldi	r20, 0x55	; 85
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	6d e6       	ldi	r22, 0x6D	; 109
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	8a e7       	ldi	r24, 0x7A	; 122
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xTaskCreate>
	// xTaskCreate(Task3_Func, "Task3", configMINIMAL_STACK_SIZE, NULL, 0, &task3ptr);

	vTaskStartScheduler();
     182:	0e 94 9e 06 	call	0xd3c	; 0xd3c <vTaskStartScheduler>
     186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x6a>

00000188 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     188:	fc 01       	movw	r30, r24
     18a:	03 96       	adiw	r24, 0x03	; 3
     18c:	92 83       	std	Z+2, r25	; 0x02
     18e:	81 83       	std	Z+1, r24	; 0x01
     190:	2f ef       	ldi	r18, 0xFF	; 255
     192:	3f ef       	ldi	r19, 0xFF	; 255
     194:	34 83       	std	Z+4, r19	; 0x04
     196:	23 83       	std	Z+3, r18	; 0x03
     198:	96 83       	std	Z+6, r25	; 0x06
     19a:	85 83       	std	Z+5, r24	; 0x05
     19c:	90 87       	std	Z+8, r25	; 0x08
     19e:	87 83       	std	Z+7, r24	; 0x07
     1a0:	10 82       	st	Z, r1
     1a2:	08 95       	ret

000001a4 <vListInitialiseItem>:
     1a4:	fc 01       	movw	r30, r24
     1a6:	11 86       	std	Z+9, r1	; 0x09
     1a8:	10 86       	std	Z+8, r1	; 0x08
     1aa:	08 95       	ret

000001ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     1b2:	48 81       	ld	r20, Y
     1b4:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     1b6:	4f 3f       	cpi	r20, 0xFF	; 255
     1b8:	2f ef       	ldi	r18, 0xFF	; 255
     1ba:	52 07       	cpc	r21, r18
     1bc:	21 f4       	brne	.+8      	; 0x1c6 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     1be:	fc 01       	movw	r30, r24
     1c0:	a7 81       	ldd	r26, Z+7	; 0x07
     1c2:	b0 85       	ldd	r27, Z+8	; 0x08
     1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     1c6:	dc 01       	movw	r26, r24
     1c8:	13 96       	adiw	r26, 0x03	; 3
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <vListInsert+0x22>
     1cc:	df 01       	movw	r26, r30
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	ed 91       	ld	r30, X+
     1d2:	fc 91       	ld	r31, X
     1d4:	13 97       	sbiw	r26, 0x03	; 3
     1d6:	20 81       	ld	r18, Z
     1d8:	31 81       	ldd	r19, Z+1	; 0x01
     1da:	42 17       	cp	r20, r18
     1dc:	53 07       	cpc	r21, r19
     1de:	b0 f7       	brcc	.-20     	; 0x1cc <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     1e0:	12 96       	adiw	r26, 0x02	; 2
     1e2:	ed 91       	ld	r30, X+
     1e4:	fc 91       	ld	r31, X
     1e6:	13 97       	sbiw	r26, 0x03	; 3
     1e8:	fb 83       	std	Y+3, r31	; 0x03
     1ea:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     1ec:	d5 83       	std	Z+5, r29	; 0x05
     1ee:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     1f0:	bd 83       	std	Y+5, r27	; 0x05
     1f2:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     1f4:	13 96       	adiw	r26, 0x03	; 3
     1f6:	dc 93       	st	X, r29
     1f8:	ce 93       	st	-X, r28
     1fa:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     1fc:	99 87       	std	Y+9, r25	; 0x09
     1fe:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     200:	fc 01       	movw	r30, r24
     202:	20 81       	ld	r18, Z
     204:	2f 5f       	subi	r18, 0xFF	; 255
     206:	20 83       	st	Z, r18
}
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     214:	a0 85       	ldd	r26, Z+8	; 0x08
     216:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     218:	c2 81       	ldd	r28, Z+2	; 0x02
     21a:	d3 81       	ldd	r29, Z+3	; 0x03
     21c:	84 81       	ldd	r24, Z+4	; 0x04
     21e:	95 81       	ldd	r25, Z+5	; 0x05
     220:	9d 83       	std	Y+5, r25	; 0x05
     222:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     224:	c4 81       	ldd	r28, Z+4	; 0x04
     226:	d5 81       	ldd	r29, Z+5	; 0x05
     228:	82 81       	ldd	r24, Z+2	; 0x02
     22a:	93 81       	ldd	r25, Z+3	; 0x03
     22c:	9b 83       	std	Y+3, r25	; 0x03
     22e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     230:	11 96       	adiw	r26, 0x01	; 1
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	12 97       	sbiw	r26, 0x02	; 2
     238:	e8 17       	cp	r30, r24
     23a:	f9 07       	cpc	r31, r25
     23c:	31 f4       	brne	.+12     	; 0x24a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     23e:	84 81       	ldd	r24, Z+4	; 0x04
     240:	95 81       	ldd	r25, Z+5	; 0x05
     242:	12 96       	adiw	r26, 0x02	; 2
     244:	9c 93       	st	X, r25
     246:	8e 93       	st	-X, r24
     248:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     24a:	11 86       	std	Z+9, r1	; 0x09
     24c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     24e:	8c 91       	ld	r24, X
     250:	81 50       	subi	r24, 0x01	; 1
     252:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     254:	8c 91       	ld	r24, X
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     25c:	1b bc       	out	0x2b, r1	; 43
     25e:	8c e7       	ldi	r24, 0x7C	; 124
     260:	8a bd       	out	0x2a, r24	; 42
     262:	8b e0       	ldi	r24, 0x0B	; 11
     264:	8e bd       	out	0x2e, r24	; 46
     266:	89 b7       	in	r24, 0x39	; 57
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	89 bf       	out	0x39, r24	; 57
     26c:	08 95       	ret

0000026e <pxPortInitialiseStack>:
     26e:	31 e1       	ldi	r19, 0x11	; 17
     270:	fc 01       	movw	r30, r24
     272:	30 83       	st	Z, r19
     274:	31 97       	sbiw	r30, 0x01	; 1
     276:	22 e2       	ldi	r18, 0x22	; 34
     278:	20 83       	st	Z, r18
     27a:	31 97       	sbiw	r30, 0x01	; 1
     27c:	a3 e3       	ldi	r26, 0x33	; 51
     27e:	a0 83       	st	Z, r26
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	60 83       	st	Z, r22
     284:	31 97       	sbiw	r30, 0x01	; 1
     286:	70 83       	st	Z, r23
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	10 82       	st	Z, r1
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	60 e8       	ldi	r22, 0x80	; 128
     290:	60 83       	st	Z, r22
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	10 82       	st	Z, r1
     296:	31 97       	sbiw	r30, 0x01	; 1
     298:	62 e0       	ldi	r22, 0x02	; 2
     29a:	60 83       	st	Z, r22
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	63 e0       	ldi	r22, 0x03	; 3
     2a0:	60 83       	st	Z, r22
     2a2:	31 97       	sbiw	r30, 0x01	; 1
     2a4:	64 e0       	ldi	r22, 0x04	; 4
     2a6:	60 83       	st	Z, r22
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	65 e0       	ldi	r22, 0x05	; 5
     2ac:	60 83       	st	Z, r22
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	66 e0       	ldi	r22, 0x06	; 6
     2b2:	60 83       	st	Z, r22
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	67 e0       	ldi	r22, 0x07	; 7
     2b8:	60 83       	st	Z, r22
     2ba:	31 97       	sbiw	r30, 0x01	; 1
     2bc:	68 e0       	ldi	r22, 0x08	; 8
     2be:	60 83       	st	Z, r22
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	69 e0       	ldi	r22, 0x09	; 9
     2c4:	60 83       	st	Z, r22
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	60 e1       	ldi	r22, 0x10	; 16
     2ca:	60 83       	st	Z, r22
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	30 83       	st	Z, r19
     2d0:	31 97       	sbiw	r30, 0x01	; 1
     2d2:	32 e1       	ldi	r19, 0x12	; 18
     2d4:	30 83       	st	Z, r19
     2d6:	31 97       	sbiw	r30, 0x01	; 1
     2d8:	33 e1       	ldi	r19, 0x13	; 19
     2da:	30 83       	st	Z, r19
     2dc:	31 97       	sbiw	r30, 0x01	; 1
     2de:	34 e1       	ldi	r19, 0x14	; 20
     2e0:	30 83       	st	Z, r19
     2e2:	31 97       	sbiw	r30, 0x01	; 1
     2e4:	35 e1       	ldi	r19, 0x15	; 21
     2e6:	30 83       	st	Z, r19
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	36 e1       	ldi	r19, 0x16	; 22
     2ec:	30 83       	st	Z, r19
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	37 e1       	ldi	r19, 0x17	; 23
     2f2:	30 83       	st	Z, r19
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	38 e1       	ldi	r19, 0x18	; 24
     2f8:	30 83       	st	Z, r19
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	39 e1       	ldi	r19, 0x19	; 25
     2fe:	30 83       	st	Z, r19
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	30 e2       	ldi	r19, 0x20	; 32
     304:	30 83       	st	Z, r19
     306:	31 97       	sbiw	r30, 0x01	; 1
     308:	31 e2       	ldi	r19, 0x21	; 33
     30a:	30 83       	st	Z, r19
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	20 83       	st	Z, r18
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	23 e2       	ldi	r18, 0x23	; 35
     314:	20 83       	st	Z, r18
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	40 83       	st	Z, r20
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	50 83       	st	Z, r21
     31e:	31 97       	sbiw	r30, 0x01	; 1
     320:	26 e2       	ldi	r18, 0x26	; 38
     322:	20 83       	st	Z, r18
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	27 e2       	ldi	r18, 0x27	; 39
     328:	20 83       	st	Z, r18
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	28 e2       	ldi	r18, 0x28	; 40
     32e:	20 83       	st	Z, r18
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	29 e2       	ldi	r18, 0x29	; 41
     334:	20 83       	st	Z, r18
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	20 e3       	ldi	r18, 0x30	; 48
     33a:	20 83       	st	Z, r18
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	21 e3       	ldi	r18, 0x31	; 49
     340:	20 83       	st	Z, r18
     342:	86 97       	sbiw	r24, 0x26	; 38
     344:	08 95       	ret

00000346 <xPortStartScheduler>:
     346:	0e 94 2e 01 	call	0x25c	; 0x25c <prvSetupTimerInterrupt>
     34a:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     34e:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     352:	cd 91       	ld	r28, X+
     354:	cd bf       	out	0x3d, r28	; 61
     356:	dd 91       	ld	r29, X+
     358:	de bf       	out	0x3e, r29	; 62
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	bf 91       	pop	r27
     364:	af 91       	pop	r26
     366:	9f 91       	pop	r25
     368:	8f 91       	pop	r24
     36a:	7f 91       	pop	r23
     36c:	6f 91       	pop	r22
     36e:	5f 91       	pop	r21
     370:	4f 91       	pop	r20
     372:	3f 91       	pop	r19
     374:	2f 91       	pop	r18
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	bf 90       	pop	r11
     384:	af 90       	pop	r10
     386:	9f 90       	pop	r9
     388:	8f 90       	pop	r8
     38a:	7f 90       	pop	r7
     38c:	6f 90       	pop	r6
     38e:	5f 90       	pop	r5
     390:	4f 90       	pop	r4
     392:	3f 90       	pop	r3
     394:	2f 90       	pop	r2
     396:	1f 90       	pop	r1
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	08 95       	ret
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	08 95       	ret

000003a4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	0f 92       	push	r0
     3ac:	1f 92       	push	r1
     3ae:	11 24       	eor	r1, r1
     3b0:	2f 92       	push	r2
     3b2:	3f 92       	push	r3
     3b4:	4f 92       	push	r4
     3b6:	5f 92       	push	r5
     3b8:	6f 92       	push	r6
     3ba:	7f 92       	push	r7
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	6f 93       	push	r22
     3da:	7f 93       	push	r23
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
     3ec:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     3f0:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     3f4:	0d b6       	in	r0, 0x3d	; 61
     3f6:	0d 92       	st	X+, r0
     3f8:	0e b6       	in	r0, 0x3e	; 62
     3fa:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     3fc:	0e 94 0f 09 	call	0x121e	; 0x121e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     400:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     404:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     408:	cd 91       	ld	r28, X+
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	dd 91       	ld	r29, X+
     40e:	de bf       	out	0x3e, r29	; 62
     410:	ff 91       	pop	r31
     412:	ef 91       	pop	r30
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	bf 91       	pop	r27
     41a:	af 91       	pop	r26
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	7f 91       	pop	r23
     422:	6f 91       	pop	r22
     424:	5f 91       	pop	r21
     426:	4f 91       	pop	r20
     428:	3f 91       	pop	r19
     42a:	2f 91       	pop	r18
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	bf 90       	pop	r11
     43a:	af 90       	pop	r10
     43c:	9f 90       	pop	r9
     43e:	8f 90       	pop	r8
     440:	7f 90       	pop	r7
     442:	6f 90       	pop	r6
     444:	5f 90       	pop	r5
     446:	4f 90       	pop	r4
     448:	3f 90       	pop	r3
     44a:	2f 90       	pop	r2
     44c:	1f 90       	pop	r1
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0

	asm volatile ( "ret" );
     454:	08 95       	ret

00000456 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	0f 92       	push	r0
     45e:	1f 92       	push	r1
     460:	11 24       	eor	r1, r1
     462:	2f 92       	push	r2
     464:	3f 92       	push	r3
     466:	4f 92       	push	r4
     468:	5f 92       	push	r5
     46a:	6f 92       	push	r6
     46c:	7f 92       	push	r7
     46e:	8f 92       	push	r8
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	2f 93       	push	r18
     484:	3f 93       	push	r19
     486:	4f 93       	push	r20
     488:	5f 93       	push	r21
     48a:	6f 93       	push	r22
     48c:	7f 93       	push	r23
     48e:	8f 93       	push	r24
     490:	9f 93       	push	r25
     492:	af 93       	push	r26
     494:	bf 93       	push	r27
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
     49e:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     4a2:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     4a6:	0d b6       	in	r0, 0x3d	; 61
     4a8:	0d 92       	st	X+, r0
     4aa:	0e b6       	in	r0, 0x3e	; 62
     4ac:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4ae:	0e 94 de 06 	call	0xdbc	; 0xdbc <xTaskIncrementTick>
     4b2:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4b4:	0e 94 0f 09 	call	0x121e	; 0x121e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4b8:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     4bc:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     4c0:	cd 91       	ld	r28, X+
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	dd 91       	ld	r29, X+
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	ff 91       	pop	r31
     4ca:	ef 91       	pop	r30
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	bf 91       	pop	r27
     4d2:	af 91       	pop	r26
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	7f 91       	pop	r23
     4da:	6f 91       	pop	r22
     4dc:	5f 91       	pop	r21
     4de:	4f 91       	pop	r20
     4e0:	3f 91       	pop	r19
     4e2:	2f 91       	pop	r18
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	9f 90       	pop	r9
     4f6:	8f 90       	pop	r8
     4f8:	7f 90       	pop	r7
     4fa:	6f 90       	pop	r6
     4fc:	5f 90       	pop	r5
     4fe:	4f 90       	pop	r4
     500:	3f 90       	pop	r3
     502:	2f 90       	pop	r2
     504:	1f 90       	pop	r1
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     50c:	08 95       	ret

0000050e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     50e:	0e 94 2b 02 	call	0x456	; 0x456 <vPortYieldFromTick>
		asm volatile ( "reti" );
     512:	18 95       	reti

00000514 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
     51a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     51e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     522:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x1>
     526:	89 2b       	or	r24, r25
     528:	31 f4       	brne	.+12     	; 0x536 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     52a:	84 e8       	ldi	r24, 0x84	; 132
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__data_end+0x1>
     532:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     536:	20 97       	sbiw	r28, 0x00	; 0
     538:	c9 f0       	breq	.+50     	; 0x56c <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     53a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <xNextFreeByte>
     53e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <xNextFreeByte+0x1>
     542:	9e 01       	movw	r18, r28
     544:	28 0f       	add	r18, r24
     546:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     548:	2b 3d       	cpi	r18, 0xDB	; 219
     54a:	45 e0       	ldi	r20, 0x05	; 5
     54c:	34 07       	cpc	r19, r20
     54e:	88 f4       	brcc	.+34     	; 0x572 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     550:	82 17       	cp	r24, r18
     552:	93 07       	cpc	r25, r19
     554:	88 f4       	brcc	.+34     	; 0x578 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     556:	c0 91 80 00 	lds	r28, 0x0080	; 0x800080 <__data_end>
     55a:	d0 91 81 00 	lds	r29, 0x0081	; 0x800081 <__data_end+0x1>
     55e:	c8 0f       	add	r28, r24
     560:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     562:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <xNextFreeByte+0x1>
     566:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <xNextFreeByte>
     56a:	08 c0       	rjmp	.+16     	; 0x57c <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     56c:	c0 e0       	ldi	r28, 0x00	; 0
     56e:	d0 e0       	ldi	r29, 0x00	; 0
     570:	05 c0       	rjmp	.+10     	; 0x57c <pvPortMalloc+0x68>
     572:	c0 e0       	ldi	r28, 0x00	; 0
     574:	d0 e0       	ldi	r29, 0x00	; 0
     576:	02 c0       	rjmp	.+4      	; 0x57c <pvPortMalloc+0x68>
     578:	c0 e0       	ldi	r28, 0x00	; 0
     57a:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     57c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     580:	ce 01       	movw	r24, r28
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     588:	08 95       	ret

0000058a <prvIsQueueEmpty>:
        {
            xReturn = pdFAIL;
        }

        return xReturn;
    }
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	0f 92       	push	r0
     590:	fc 01       	movw	r30, r24
     592:	82 8d       	ldd	r24, Z+26	; 0x1a
     594:	81 11       	cpse	r24, r1
     596:	02 c0       	rjmp	.+4      	; 0x59c <prvIsQueueEmpty+0x12>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	01 c0       	rjmp	.+2      	; 0x59e <prvIsQueueEmpty+0x14>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	08 95       	ret

000005a4 <prvCopyDataFromQueue>:
     5a4:	fc 01       	movw	r30, r24
     5a6:	44 8d       	ldd	r20, Z+28	; 0x1c
     5a8:	44 23       	and	r20, r20
     5aa:	a9 f0       	breq	.+42     	; 0x5d6 <prvCopyDataFromQueue+0x32>
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	26 81       	ldd	r18, Z+6	; 0x06
     5b0:	37 81       	ldd	r19, Z+7	; 0x07
     5b2:	24 0f       	add	r18, r20
     5b4:	35 1f       	adc	r19, r21
     5b6:	37 83       	std	Z+7, r19	; 0x07
     5b8:	26 83       	std	Z+6, r18	; 0x06
     5ba:	84 81       	ldd	r24, Z+4	; 0x04
     5bc:	95 81       	ldd	r25, Z+5	; 0x05
     5be:	28 17       	cp	r18, r24
     5c0:	39 07       	cpc	r19, r25
     5c2:	20 f0       	brcs	.+8      	; 0x5cc <prvCopyDataFromQueue+0x28>
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	97 83       	std	Z+7, r25	; 0x07
     5ca:	86 83       	std	Z+6, r24	; 0x06
     5cc:	cb 01       	movw	r24, r22
     5ce:	66 81       	ldd	r22, Z+6	; 0x06
     5d0:	77 81       	ldd	r23, Z+7	; 0x07
     5d2:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <memcpy>
     5d6:	08 95       	ret

000005d8 <prvUnlockQueue>:
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	0f 92       	push	r0
     5e6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     5e8:	0b c0       	rjmp	.+22     	; 0x600 <prvUnlockQueue+0x28>
     5ea:	89 89       	ldd	r24, Y+17	; 0x11
     5ec:	88 23       	and	r24, r24
     5ee:	51 f0       	breq	.+20     	; 0x604 <prvUnlockQueue+0x2c>
     5f0:	ce 01       	movw	r24, r28
     5f2:	41 96       	adiw	r24, 0x11	; 17
     5f4:	0e 94 be 09 	call	0x137c	; 0x137c <xTaskRemoveFromEventList>
     5f8:	81 11       	cpse	r24, r1
     5fa:	0e 94 b8 0a 	call	0x1570	; 0x1570 <vTaskMissedYield>
     5fe:	11 50       	subi	r17, 0x01	; 1
     600:	11 16       	cp	r1, r17
     602:	9c f3       	brlt	.-26     	; 0x5ea <prvUnlockQueue+0x12>
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	8e 8f       	std	Y+30, r24	; 0x1e
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	0f 92       	push	r0
     612:	1d 8d       	ldd	r17, Y+29	; 0x1d
     614:	0b c0       	rjmp	.+22     	; 0x62c <prvUnlockQueue+0x54>
     616:	88 85       	ldd	r24, Y+8	; 0x08
     618:	88 23       	and	r24, r24
     61a:	51 f0       	breq	.+20     	; 0x630 <prvUnlockQueue+0x58>
     61c:	ce 01       	movw	r24, r28
     61e:	08 96       	adiw	r24, 0x08	; 8
     620:	0e 94 be 09 	call	0x137c	; 0x137c <xTaskRemoveFromEventList>
     624:	81 11       	cpse	r24, r1
     626:	0e 94 b8 0a 	call	0x1570	; 0x1570 <vTaskMissedYield>
     62a:	11 50       	subi	r17, 0x01	; 1
     62c:	11 16       	cp	r1, r17
     62e:	9c f3       	brlt	.-26     	; 0x616 <prvUnlockQueue+0x3e>
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	8d 8f       	std	Y+29, r24	; 0x1d
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	08 95       	ret

00000640 <xQueueGenericReset>:
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	fc 01       	movw	r30, r24
     64a:	36 2f       	mov	r19, r22
     64c:	89 2b       	or	r24, r25
     64e:	09 f4       	brne	.+2      	; 0x652 <xQueueGenericReset+0x12>
     650:	4d c0       	rjmp	.+154    	; 0x6ec <xQueueGenericReset+0xac>
     652:	23 8d       	ldd	r18, Z+27	; 0x1b
     654:	22 23       	and	r18, r18
     656:	09 f4       	brne	.+2      	; 0x65a <xQueueGenericReset+0x1a>
     658:	4b c0       	rjmp	.+150    	; 0x6f0 <xQueueGenericReset+0xb0>
     65a:	02 2f       	mov	r16, r18
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	9f ef       	ldi	r25, 0xFF	; 255
     662:	b8 01       	movw	r22, r16
     664:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
     668:	44 8d       	ldd	r20, Z+28	; 0x1c
     66a:	84 2f       	mov	r24, r20
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	68 17       	cp	r22, r24
     670:	79 07       	cpc	r23, r25
     672:	08 f4       	brcc	.+2      	; 0x676 <xQueueGenericReset+0x36>
     674:	3f c0       	rjmp	.+126    	; 0x6f4 <xQueueGenericReset+0xb4>
     676:	ef 01       	movw	r28, r30
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	0f 92       	push	r0
     67e:	60 81       	ld	r22, Z
     680:	71 81       	ldd	r23, Z+1	; 0x01
     682:	fb 01       	movw	r30, r22
     684:	24 9f       	mul	r18, r20
     686:	e0 0d       	add	r30, r0
     688:	f1 1d       	adc	r31, r1
     68a:	11 24       	eor	r1, r1
     68c:	fd 83       	std	Y+5, r31	; 0x05
     68e:	ec 83       	std	Y+4, r30	; 0x04
     690:	1a 8e       	std	Y+26, r1	; 0x1a
     692:	7b 83       	std	Y+3, r23	; 0x03
     694:	6a 83       	std	Y+2, r22	; 0x02
     696:	01 50       	subi	r16, 0x01	; 1
     698:	11 09       	sbc	r17, r1
     69a:	80 9f       	mul	r24, r16
     69c:	a0 01       	movw	r20, r0
     69e:	81 9f       	mul	r24, r17
     6a0:	50 0d       	add	r21, r0
     6a2:	90 9f       	mul	r25, r16
     6a4:	50 0d       	add	r21, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	cb 01       	movw	r24, r22
     6aa:	84 0f       	add	r24, r20
     6ac:	95 1f       	adc	r25, r21
     6ae:	9f 83       	std	Y+7, r25	; 0x07
     6b0:	8e 83       	std	Y+6, r24	; 0x06
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	8d 8f       	std	Y+29, r24	; 0x1d
     6b6:	8e 8f       	std	Y+30, r24	; 0x1e
     6b8:	31 11       	cpse	r19, r1
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <xQueueGenericReset+0x94>
     6bc:	88 85       	ldd	r24, Y+8	; 0x08
     6be:	88 23       	and	r24, r24
     6c0:	89 f0       	breq	.+34     	; 0x6e4 <xQueueGenericReset+0xa4>
     6c2:	ce 01       	movw	r24, r28
     6c4:	08 96       	adiw	r24, 0x08	; 8
     6c6:	0e 94 be 09 	call	0x137c	; 0x137c <xTaskRemoveFromEventList>
     6ca:	88 23       	and	r24, r24
     6cc:	59 f0       	breq	.+22     	; 0x6e4 <xQueueGenericReset+0xa4>
     6ce:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <xQueueGenericReset+0xa4>
     6d4:	ce 01       	movw	r24, r28
     6d6:	08 96       	adiw	r24, 0x08	; 8
     6d8:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
     6dc:	ce 01       	movw	r24, r28
     6de:	41 96       	adiw	r24, 0x11	; 17
     6e0:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <xQueueGenericReset+0xb6>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <xQueueGenericReset+0xb6>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <xQueueGenericReset+0xb6>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <prvInitialiseNewQueue>:
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	f8 01       	movw	r30, r16
     706:	61 11       	cpse	r22, r1
     708:	03 c0       	rjmp	.+6      	; 0x710 <prvInitialiseNewQueue+0x10>
     70a:	11 83       	std	Z+1, r17	; 0x01
     70c:	00 83       	st	Z, r16
     70e:	02 c0       	rjmp	.+4      	; 0x714 <prvInitialiseNewQueue+0x14>
     710:	51 83       	std	Z+1, r21	; 0x01
     712:	40 83       	st	Z, r20
     714:	83 8f       	std	Z+27, r24	; 0x1b
     716:	64 8f       	std	Z+28, r22	; 0x1c
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	cf 01       	movw	r24, r30
     71c:	0e 94 20 03 	call	0x640	; 0x640 <xQueueGenericReset>
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <xQueueGenericCreate>:
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	38 2f       	mov	r19, r24
     736:	e6 2f       	mov	r30, r22
     738:	88 23       	and	r24, r24
     73a:	29 f1       	breq	.+74     	; 0x786 <xQueueGenericCreate+0x60>
     73c:	68 2f       	mov	r22, r24
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	9f ef       	ldi	r25, 0xFF	; 255
     744:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__udivmodhi4>
     748:	8e 2f       	mov	r24, r30
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	68 17       	cp	r22, r24
     74e:	79 07       	cpc	r23, r25
     750:	e8 f0       	brcs	.+58     	; 0x78c <xQueueGenericCreate+0x66>
     752:	3e 9f       	mul	r19, r30
     754:	c0 01       	movw	r24, r0
     756:	11 24       	eor	r1, r1
     758:	81 3e       	cpi	r24, 0xE1	; 225
     75a:	2f ef       	ldi	r18, 0xFF	; 255
     75c:	92 07       	cpc	r25, r18
     75e:	c8 f4       	brcc	.+50     	; 0x792 <xQueueGenericCreate+0x6c>
     760:	d4 2e       	mov	r13, r20
     762:	de 2f       	mov	r29, r30
     764:	c3 2f       	mov	r28, r19
     766:	4f 96       	adiw	r24, 0x1f	; 31
     768:	0e 94 8a 02 	call	0x514	; 0x514 <pvPortMalloc>
     76c:	7c 01       	movw	r14, r24
     76e:	00 97       	sbiw	r24, 0x00	; 0
     770:	91 f0       	breq	.+36     	; 0x796 <xQueueGenericCreate+0x70>
     772:	8c 01       	movw	r16, r24
     774:	2d 2d       	mov	r18, r13
     776:	ac 01       	movw	r20, r24
     778:	41 5e       	subi	r20, 0xE1	; 225
     77a:	5f 4f       	sbci	r21, 0xFF	; 255
     77c:	6d 2f       	mov	r22, r29
     77e:	8c 2f       	mov	r24, r28
     780:	0e 94 80 03 	call	0x700	; 0x700 <prvInitialiseNewQueue>
     784:	08 c0       	rjmp	.+16     	; 0x796 <xQueueGenericCreate+0x70>
     786:	e1 2c       	mov	r14, r1
     788:	f1 2c       	mov	r15, r1
     78a:	05 c0       	rjmp	.+10     	; 0x796 <xQueueGenericCreate+0x70>
     78c:	e1 2c       	mov	r14, r1
     78e:	f1 2c       	mov	r15, r1
     790:	02 c0       	rjmp	.+4      	; 0x796 <xQueueGenericCreate+0x70>
     792:	e1 2c       	mov	r14, r1
     794:	f1 2c       	mov	r15, r1
     796:	c7 01       	movw	r24, r14
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	08 95       	ret

000007a8 <xQueueReceive>:
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <xQueueReceive+0x12>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <xQueueReceive+0x14>
     7bc:	1f 92       	push	r1
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	8c 01       	movw	r16, r24
     7c4:	6b 01       	movw	r12, r22
     7c6:	5d 83       	std	Y+5, r21	; 0x05
     7c8:	4c 83       	std	Y+4, r20	; 0x04
     7ca:	e1 2c       	mov	r14, r1
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	0f 92       	push	r0
     7d2:	f8 01       	movw	r30, r16
     7d4:	f2 8c       	ldd	r15, Z+26	; 0x1a
     7d6:	ff 20       	and	r15, r15
     7d8:	a9 f0       	breq	.+42     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7da:	b6 01       	movw	r22, r12
     7dc:	c8 01       	movw	r24, r16
     7de:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <prvCopyDataFromQueue>
     7e2:	fa 94       	dec	r15
     7e4:	f8 01       	movw	r30, r16
     7e6:	f2 8e       	std	Z+26, r15	; 0x1a
     7e8:	80 85       	ldd	r24, Z+8	; 0x08
     7ea:	88 23       	and	r24, r24
     7ec:	39 f0       	breq	.+14     	; 0x7fc <xQueueReceive+0x54>
     7ee:	c8 01       	movw	r24, r16
     7f0:	08 96       	adiw	r24, 0x08	; 8
     7f2:	0e 94 be 09 	call	0x137c	; 0x137c <xTaskRemoveFromEventList>
     7f6:	81 11       	cpse	r24, r1
     7f8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	53 c0       	rjmp	.+166    	; 0x8aa <__stack+0x4b>
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	9d 81       	ldd	r25, Y+5	; 0x05
     808:	89 2b       	or	r24, r25
     80a:	21 f4       	brne	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	4b c0       	rjmp	.+150    	; 0x8aa <__stack+0x4b>
     814:	e1 10       	cpse	r14, r1
     816:	06 c0       	rjmp	.+12     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     818:	ce 01       	movw	r24, r28
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <vTaskInternalSetTimeOutState>
     820:	ee 24       	eor	r14, r14
     822:	e3 94       	inc	r14
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0e 94 ce 06 	call	0xd9c	; 0xd9c <vTaskSuspendAll>
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	0f 92       	push	r0
     832:	f8 01       	movw	r30, r16
     834:	85 8d       	ldd	r24, Z+29	; 0x1d
     836:	8f 3f       	cpi	r24, 0xFF	; 255
     838:	09 f4       	brne	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     83a:	15 8e       	std	Z+29, r1	; 0x1d
     83c:	f8 01       	movw	r30, r16
     83e:	86 8d       	ldd	r24, Z+30	; 0x1e
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	09 f4       	brne	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     844:	16 8e       	std	Z+30, r1	; 0x1e
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	be 01       	movw	r22, r28
     84c:	6c 5f       	subi	r22, 0xFC	; 252
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	ce 01       	movw	r24, r28
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	0e 94 86 0a 	call	0x150c	; 0x150c <xTaskCheckForTimeOut>
     858:	81 11       	cpse	r24, r1
     85a:	1b c0       	rjmp	.+54     	; 0x892 <__stack+0x33>
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 c5 02 	call	0x58a	; 0x58a <prvIsQueueEmpty>
     862:	88 23       	and	r24, r24
     864:	81 f0       	breq	.+32     	; 0x886 <__stack+0x27>
     866:	6c 81       	ldd	r22, Y+4	; 0x04
     868:	7d 81       	ldd	r23, Y+5	; 0x05
     86a:	c8 01       	movw	r24, r16
     86c:	41 96       	adiw	r24, 0x11	; 17
     86e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <vTaskPlaceOnEventList>
     872:	c8 01       	movw	r24, r16
     874:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <prvUnlockQueue>
     878:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
     87c:	81 11       	cpse	r24, r1
     87e:	a6 cf       	rjmp	.-180    	; 0x7cc <xQueueReceive+0x24>
     880:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
     884:	a3 cf       	rjmp	.-186    	; 0x7cc <xQueueReceive+0x24>
     886:	c8 01       	movw	r24, r16
     888:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <prvUnlockQueue>
     88c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
     890:	9d cf       	rjmp	.-198    	; 0x7cc <xQueueReceive+0x24>
     892:	c8 01       	movw	r24, r16
     894:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <prvUnlockQueue>
     898:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 c5 02 	call	0x58a	; 0x58a <prvIsQueueEmpty>
     8a2:	88 23       	and	r24, r24
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	92 cf       	rjmp	.-220    	; 0x7cc <xQueueReceive+0x24>
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	08 95       	ret

000008c6 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	0f 92       	push	r0
     8d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8d4:	8f 3f       	cpi	r24, 0xFF	; 255
     8d6:	09 f4       	brne	.+2      	; 0x8da <vQueueWaitForMessageRestricted+0x14>
     8d8:	1d 8e       	std	Y+29, r1	; 0x1d
     8da:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8dc:	8f 3f       	cpi	r24, 0xFF	; 255
     8de:	09 f4       	brne	.+2      	; 0x8e2 <vQueueWaitForMessageRestricted+0x1c>
     8e0:	1e 8e       	std	Y+30, r1	; 0x1e
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     8e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8e8:	81 11       	cpse	r24, r1
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     8ec:	ce 01       	movw	r24, r28
     8ee:	41 96       	adiw	r24, 0x11	; 17
     8f0:	0e 94 75 09 	call	0x12ea	; 0x12ea <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     8f4:	ce 01       	movw	r24, r28
     8f6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <prvUnlockQueue>
    }
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     900:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     904:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     908:	80 81       	ld	r24, Z
     90a:	81 11       	cpse	r24, r1
     90c:	07 c0       	rjmp	.+14     	; 0x91c <prvResetNextTaskUnblockTime+0x1c>
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	9f ef       	ldi	r25, 0xFF	; 255
     912:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
     916:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
     91a:	08 95       	ret
     91c:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     920:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     924:	05 80       	ldd	r0, Z+5	; 0x05
     926:	f6 81       	ldd	r31, Z+6	; 0x06
     928:	e0 2d       	mov	r30, r0
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
     932:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
     936:	08 95       	ret

00000938 <prvDeleteTCB>:
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	8f 89       	ldd	r24, Y+23	; 0x17
     940:	98 8d       	ldd	r25, Y+24	; 0x18
     942:	0e 94 c4 02 	call	0x588	; 0x588 <vPortFree>
     946:	ce 01       	movw	r24, r28
     948:	0e 94 c4 02 	call	0x588	; 0x588 <vPortFree>
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <prvInitialiseNewTask>:
     952:	6f 92       	push	r6
     954:	7f 92       	push	r7
     956:	8f 92       	push	r8
     958:	9f 92       	push	r9
     95a:	af 92       	push	r10
     95c:	bf 92       	push	r11
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	4c 01       	movw	r8, r24
     972:	d5 01       	movw	r26, r10
     974:	57 96       	adiw	r26, 0x17	; 23
     976:	8d 91       	ld	r24, X+
     978:	9c 91       	ld	r25, X
     97a:	58 97       	sbiw	r26, 0x18	; 24
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	31 09       	sbc	r19, r1
     980:	3c 01       	movw	r6, r24
     982:	62 0e       	add	r6, r18
     984:	73 1e       	adc	r7, r19
     986:	61 15       	cp	r22, r1
     988:	71 05       	cpc	r23, r1
     98a:	89 f4       	brne	.+34     	; 0x9ae <prvInitialiseNewTask+0x5c>
     98c:	16 c0       	rjmp	.+44     	; 0x9ba <prvInitialiseNewTask+0x68>
     98e:	82 2f       	mov	r24, r18
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	fb 01       	movw	r30, r22
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	30 81       	ld	r19, Z
     99a:	d5 01       	movw	r26, r10
     99c:	a8 0f       	add	r26, r24
     99e:	b9 1f       	adc	r27, r25
     9a0:	59 96       	adiw	r26, 0x19	; 25
     9a2:	3c 93       	st	X, r19
     9a4:	80 81       	ld	r24, Z
     9a6:	88 23       	and	r24, r24
     9a8:	29 f0       	breq	.+10     	; 0x9b4 <prvInitialiseNewTask+0x62>
     9aa:	2f 5f       	subi	r18, 0xFF	; 255
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <prvInitialiseNewTask+0x5e>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	28 30       	cpi	r18, 0x08	; 8
     9b2:	68 f3       	brcs	.-38     	; 0x98e <prvInitialiseNewTask+0x3c>
     9b4:	f5 01       	movw	r30, r10
     9b6:	10 a2       	std	Z+32, r1	; 0x20
     9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <prvInitialiseNewTask+0x6e>
     9ba:	d5 01       	movw	r26, r10
     9bc:	59 96       	adiw	r26, 0x19	; 25
     9be:	1c 92       	st	X, r1
     9c0:	b3 e0       	ldi	r27, 0x03	; 3
     9c2:	be 15       	cp	r27, r14
     9c4:	20 f4       	brcc	.+8      	; 0x9ce <prvInitialiseNewTask+0x7c>
     9c6:	0f 2e       	mov	r0, r31
     9c8:	f3 e0       	ldi	r31, 0x03	; 3
     9ca:	ef 2e       	mov	r14, r31
     9cc:	f0 2d       	mov	r31, r0
     9ce:	f5 01       	movw	r30, r10
     9d0:	e6 8a       	std	Z+22, r14	; 0x16
     9d2:	c5 01       	movw	r24, r10
     9d4:	02 96       	adiw	r24, 0x02	; 2
     9d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <vListInitialiseItem>
     9da:	c5 01       	movw	r24, r10
     9dc:	0c 96       	adiw	r24, 0x0c	; 12
     9de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <vListInitialiseItem>
     9e2:	d5 01       	movw	r26, r10
     9e4:	19 96       	adiw	r26, 0x09	; 9
     9e6:	bc 92       	st	X, r11
     9e8:	ae 92       	st	-X, r10
     9ea:	18 97       	sbiw	r26, 0x08	; 8
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	8e 19       	sub	r24, r14
     9f2:	91 09       	sbc	r25, r1
     9f4:	1d 96       	adiw	r26, 0x0d	; 13
     9f6:	9c 93       	st	X, r25
     9f8:	8e 93       	st	-X, r24
     9fa:	1c 97       	sbiw	r26, 0x0c	; 12
     9fc:	53 96       	adiw	r26, 0x13	; 19
     9fe:	bc 92       	st	X, r11
     a00:	ae 92       	st	-X, r10
     a02:	52 97       	sbiw	r26, 0x12	; 18
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	f5 01       	movw	r30, r10
     a08:	b1 96       	adiw	r30, 0x21	; 33
     a0a:	df 01       	movw	r26, r30
     a0c:	1d 92       	st	X+, r1
     a0e:	8a 95       	dec	r24
     a10:	e9 f7       	brne	.-6      	; 0xa0c <prvInitialiseNewTask+0xba>
     a12:	f5 01       	movw	r30, r10
     a14:	15 a2       	std	Z+37, r1	; 0x25
     a16:	a8 01       	movw	r20, r16
     a18:	b4 01       	movw	r22, r8
     a1a:	c3 01       	movw	r24, r6
     a1c:	0e 94 37 01 	call	0x26e	; 0x26e <pxPortInitialiseStack>
     a20:	d5 01       	movw	r26, r10
     a22:	8d 93       	st	X+, r24
     a24:	9c 93       	st	X, r25
     a26:	c1 14       	cp	r12, r1
     a28:	d1 04       	cpc	r13, r1
     a2a:	19 f0       	breq	.+6      	; 0xa32 <prvInitialiseNewTask+0xe0>
     a2c:	f6 01       	movw	r30, r12
     a2e:	b1 82       	std	Z+1, r11	; 0x01
     a30:	a0 82       	st	Z, r10
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	7f 90       	pop	r7
     a4a:	6f 90       	pop	r6
     a4c:	08 95       	ret

00000a4e <prvInitialiseTaskLists>:
     a4e:	cf 93       	push	r28
     a50:	c0 e0       	ldi	r28, 0x00	; 0
     a52:	10 c0       	rjmp	.+32     	; 0xa74 <prvInitialiseTaskLists+0x26>
     a54:	8c 2f       	mov	r24, r28
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	9c 01       	movw	r18, r24
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	22 0f       	add	r18, r18
     a64:	33 1f       	adc	r19, r19
     a66:	82 0f       	add	r24, r18
     a68:	93 1f       	adc	r25, r19
     a6a:	88 56       	subi	r24, 0x68	; 104
     a6c:	99 4f       	sbci	r25, 0xF9	; 249
     a6e:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
     a72:	cf 5f       	subi	r28, 0xFF	; 255
     a74:	c4 30       	cpi	r28, 0x04	; 4
     a76:	70 f3       	brcs	.-36     	; 0xa54 <prvInitialiseTaskLists+0x6>
     a78:	8f e8       	ldi	r24, 0x8F	; 143
     a7a:	96 e0       	ldi	r25, 0x06	; 6
     a7c:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
     a80:	86 e8       	ldi	r24, 0x86	; 134
     a82:	96 e0       	ldi	r25, 0x06	; 6
     a84:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
     a88:	89 e7       	ldi	r24, 0x79	; 121
     a8a:	96 e0       	ldi	r25, 0x06	; 6
     a8c:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
     a90:	80 e7       	ldi	r24, 0x70	; 112
     a92:	96 e0       	ldi	r25, 0x06	; 6
     a94:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
     a98:	8f e8       	ldi	r24, 0x8F	; 143
     a9a:	96 e0       	ldi	r25, 0x06	; 6
     a9c:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <pxDelayedTaskList+0x1>
     aa0:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <pxDelayedTaskList>
     aa4:	86 e8       	ldi	r24, 0x86	; 134
     aa6:	96 e0       	ldi	r25, 0x06	; 6
     aa8:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     aac:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <pxOverflowDelayedTaskList>
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <prvAddNewTaskToReadyList>:
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ec 01       	movw	r28, r24
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	0f 92       	push	r0
     ac0:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
     ac4:	8f 5f       	subi	r24, 0xFF	; 255
     ac6:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxCurrentNumberOfTasks>
     aca:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <pxCurrentTCB>
     ace:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     ad2:	89 2b       	or	r24, r25
     ad4:	59 f4       	brne	.+22     	; 0xaec <prvAddNewTaskToReadyList+0x38>
     ad6:	d0 93 bd 06 	sts	0x06BD, r29	; 0x8006bd <pxCurrentTCB+0x1>
     ada:	c0 93 bc 06 	sts	0x06BC, r28	; 0x8006bc <pxCurrentTCB>
     ade:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	99 f4       	brne	.+38     	; 0xb0c <prvAddNewTaskToReadyList+0x58>
     ae6:	0e 94 27 05 	call	0xa4e	; 0xa4e <prvInitialiseTaskLists>
     aea:	10 c0       	rjmp	.+32     	; 0xb0c <prvAddNewTaskToReadyList+0x58>
     aec:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <xSchedulerRunning>
     af0:	81 11       	cpse	r24, r1
     af2:	0c c0       	rjmp	.+24     	; 0xb0c <prvAddNewTaskToReadyList+0x58>
     af4:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     af8:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     afc:	96 89       	ldd	r25, Z+22	; 0x16
     afe:	8e 89       	ldd	r24, Y+22	; 0x16
     b00:	89 17       	cp	r24, r25
     b02:	20 f0       	brcs	.+8      	; 0xb0c <prvAddNewTaskToReadyList+0x58>
     b04:	d0 93 bd 06 	sts	0x06BD, r29	; 0x8006bd <pxCurrentTCB+0x1>
     b08:	c0 93 bc 06 	sts	0x06BC, r28	; 0x8006bc <pxCurrentTCB>
     b0c:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <uxTaskNumber>
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <uxTaskNumber>
     b16:	8e 89       	ldd	r24, Y+22	; 0x16
     b18:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
     b1c:	98 17       	cp	r25, r24
     b1e:	10 f4       	brcc	.+4      	; 0xb24 <prvAddNewTaskToReadyList+0x70>
     b20:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxTopReadyPriority>
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	fc 01       	movw	r30, r24
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	8e 0f       	add	r24, r30
     b36:	9f 1f       	adc	r25, r31
     b38:	fc 01       	movw	r30, r24
     b3a:	e8 56       	subi	r30, 0x68	; 104
     b3c:	f9 4f       	sbci	r31, 0xF9	; 249
     b3e:	01 80       	ldd	r0, Z+1	; 0x01
     b40:	f2 81       	ldd	r31, Z+2	; 0x02
     b42:	e0 2d       	mov	r30, r0
     b44:	fd 83       	std	Y+5, r31	; 0x05
     b46:	ec 83       	std	Y+4, r30	; 0x04
     b48:	84 81       	ldd	r24, Z+4	; 0x04
     b4a:	95 81       	ldd	r25, Z+5	; 0x05
     b4c:	9f 83       	std	Y+7, r25	; 0x07
     b4e:	8e 83       	std	Y+6, r24	; 0x06
     b50:	a4 81       	ldd	r26, Z+4	; 0x04
     b52:	b5 81       	ldd	r27, Z+5	; 0x05
     b54:	ce 01       	movw	r24, r28
     b56:	02 96       	adiw	r24, 0x02	; 2
     b58:	13 96       	adiw	r26, 0x03	; 3
     b5a:	9c 93       	st	X, r25
     b5c:	8e 93       	st	-X, r24
     b5e:	12 97       	sbiw	r26, 0x02	; 2
     b60:	95 83       	std	Z+5, r25	; 0x05
     b62:	84 83       	std	Z+4, r24	; 0x04
     b64:	ee 89       	ldd	r30, Y+22	; 0x16
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	cf 01       	movw	r24, r30
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	e8 0f       	add	r30, r24
     b78:	f9 1f       	adc	r31, r25
     b7a:	e8 56       	subi	r30, 0x68	; 104
     b7c:	f9 4f       	sbci	r31, 0xF9	; 249
     b7e:	fb 87       	std	Y+11, r31	; 0x0b
     b80:	ea 87       	std	Y+10, r30	; 0x0a
     b82:	80 81       	ld	r24, Z
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	80 83       	st	Z, r24
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <xSchedulerRunning>
     b90:	88 23       	and	r24, r24
     b92:	51 f0       	breq	.+20     	; 0xba8 <prvAddNewTaskToReadyList+0xf4>
     b94:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     b98:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     b9c:	96 89       	ldd	r25, Z+22	; 0x16
     b9e:	8e 89       	ldd	r24, Y+22	; 0x16
     ba0:	98 17       	cp	r25, r24
     ba2:	10 f4       	brcc	.+4      	; 0xba8 <prvAddNewTaskToReadyList+0xf4>
     ba4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <prvCheckTasksWaitingTermination>:
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	1c c0       	rjmp	.+56     	; 0xbec <prvCheckTasksWaitingTermination+0x3e>
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	0f 92       	push	r0
     bba:	e0 91 75 06 	lds	r30, 0x0675	; 0x800675 <xTasksWaitingTermination+0x5>
     bbe:	f0 91 76 06 	lds	r31, 0x0676	; 0x800676 <xTasksWaitingTermination+0x6>
     bc2:	c6 81       	ldd	r28, Z+6	; 0x06
     bc4:	d7 81       	ldd	r29, Z+7	; 0x07
     bc6:	ce 01       	movw	r24, r28
     bc8:	02 96       	adiw	r24, 0x02	; 2
     bca:	0e 94 07 01 	call	0x20e	; 0x20e <uxListRemove>
     bce:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
     bd2:	81 50       	subi	r24, 0x01	; 1
     bd4:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxCurrentNumberOfTasks>
     bd8:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxDeletedTasksWaitingCleanUp>
     bdc:	81 50       	subi	r24, 0x01	; 1
     bde:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <uxDeletedTasksWaitingCleanUp>
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	ce 01       	movw	r24, r28
     be8:	0e 94 9c 04 	call	0x938	; 0x938 <prvDeleteTCB>
     bec:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxDeletedTasksWaitingCleanUp>
     bf0:	81 11       	cpse	r24, r1
     bf2:	e0 cf       	rjmp	.-64     	; 0xbb4 <prvCheckTasksWaitingTermination+0x6>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <prvIdleTask>:
     bfa:	0e 94 d7 05 	call	0xbae	; 0xbae <prvCheckTasksWaitingTermination>
     bfe:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxReadyTasksLists>
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	d0 f3       	brcs	.-12     	; 0xbfa <prvIdleTask>
     c06:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
     c0a:	f7 cf       	rjmp	.-18     	; 0xbfa <prvIdleTask>

00000c0c <prvAddCurrentTaskToDelayedList>:
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
     c16:	00 91 6c 06 	lds	r16, 0x066C	; 0x80066c <xTickCount>
     c1a:	10 91 6d 06 	lds	r17, 0x066D	; 0x80066d <xTickCount+0x1>
     c1e:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <pxCurrentTCB>
     c22:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     c26:	02 96       	adiw	r24, 0x02	; 2
     c28:	0e 94 07 01 	call	0x20e	; 0x20e <uxListRemove>
     c2c:	c0 0f       	add	r28, r16
     c2e:	d1 1f       	adc	r29, r17
     c30:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     c34:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     c38:	d3 83       	std	Z+3, r29	; 0x03
     c3a:	c2 83       	std	Z+2, r28	; 0x02
     c3c:	c0 17       	cp	r28, r16
     c3e:	d1 07       	cpc	r29, r17
     c40:	68 f4       	brcc	.+26     	; 0xc5c <prvAddCurrentTaskToDelayedList+0x50>
     c42:	60 91 bc 06 	lds	r22, 0x06BC	; 0x8006bc <pxCurrentTCB>
     c46:	70 91 bd 06 	lds	r23, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     c4a:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <pxOverflowDelayedTaskList>
     c4e:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     c52:	6e 5f       	subi	r22, 0xFE	; 254
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vListInsert>
     c5a:	17 c0       	rjmp	.+46     	; 0xc8a <prvAddCurrentTaskToDelayedList+0x7e>
     c5c:	60 91 bc 06 	lds	r22, 0x06BC	; 0x8006bc <pxCurrentTCB>
     c60:	70 91 bd 06 	lds	r23, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     c64:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <pxDelayedTaskList>
     c68:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     c6c:	6e 5f       	subi	r22, 0xFE	; 254
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vListInsert>
     c74:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xNextTaskUnblockTime>
     c78:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <xNextTaskUnblockTime+0x1>
     c7c:	c8 17       	cp	r28, r24
     c7e:	d9 07       	cpc	r29, r25
     c80:	20 f4       	brcc	.+8      	; 0xc8a <prvAddCurrentTaskToDelayedList+0x7e>
     c82:	d0 93 64 06 	sts	0x0664, r29	; 0x800664 <xNextTaskUnblockTime+0x1>
     c86:	c0 93 63 06 	sts	0x0663, r28	; 0x800663 <xNextTaskUnblockTime>
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <xTaskCreate>:
     c94:	2f 92       	push	r2
     c96:	3f 92       	push	r3
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	3c 01       	movw	r6, r24
     cba:	1b 01       	movw	r2, r22
     cbc:	5a 01       	movw	r10, r20
     cbe:	29 01       	movw	r4, r18
     cc0:	ca 01       	movw	r24, r20
     cc2:	0e 94 8a 02 	call	0x514	; 0x514 <pvPortMalloc>
     cc6:	6c 01       	movw	r12, r24
     cc8:	89 2b       	or	r24, r25
     cca:	71 f0       	breq	.+28     	; 0xce8 <xTaskCreate+0x54>
     ccc:	86 e2       	ldi	r24, 0x26	; 38
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 8a 02 	call	0x514	; 0x514 <pvPortMalloc>
     cd4:	ec 01       	movw	r28, r24
     cd6:	89 2b       	or	r24, r25
     cd8:	19 f0       	breq	.+6      	; 0xce0 <xTaskCreate+0x4c>
     cda:	d8 8e       	std	Y+24, r13	; 0x18
     cdc:	cf 8a       	std	Y+23, r12	; 0x17
     cde:	06 c0       	rjmp	.+12     	; 0xcec <xTaskCreate+0x58>
     ce0:	c6 01       	movw	r24, r12
     ce2:	0e 94 c4 02 	call	0x588	; 0x588 <vPortFree>
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <xTaskCreate+0x58>
     ce8:	c0 e0       	ldi	r28, 0x00	; 0
     cea:	d0 e0       	ldi	r29, 0x00	; 0
     cec:	20 97       	sbiw	r28, 0x00	; 0
     cee:	91 f0       	breq	.+36     	; 0xd14 <xTaskCreate+0x80>
     cf0:	95 01       	movw	r18, r10
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	81 2c       	mov	r8, r1
     cf8:	91 2c       	mov	r9, r1
     cfa:	5e 01       	movw	r10, r28
     cfc:	67 01       	movw	r12, r14
     cfe:	e0 2e       	mov	r14, r16
     d00:	82 01       	movw	r16, r4
     d02:	b1 01       	movw	r22, r2
     d04:	c3 01       	movw	r24, r6
     d06:	0e 94 a9 04 	call	0x952	; 0x952 <prvInitialiseNewTask>
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 5a 05 	call	0xab4	; 0xab4 <prvAddNewTaskToReadyList>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <xTaskCreate+0x82>
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	08 95       	ret

00000d3c <vTaskStartScheduler>:
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	0f 2e       	mov	r0, r31
     d44:	f1 e6       	ldi	r31, 0x61	; 97
     d46:	ef 2e       	mov	r14, r31
     d48:	f6 e0       	ldi	r31, 0x06	; 6
     d4a:	ff 2e       	mov	r15, r31
     d4c:	f0 2d       	mov	r31, r0
     d4e:	00 e0       	ldi	r16, 0x00	; 0
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	45 e5       	ldi	r20, 0x55	; 85
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	63 e7       	ldi	r22, 0x73	; 115
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	8d ef       	ldi	r24, 0xFD	; 253
     d5e:	95 e0       	ldi	r25, 0x05	; 5
     d60:	0e 94 4a 06 	call	0xc94	; 0xc94 <xTaskCreate>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	11 f4       	brne	.+4      	; 0xd6c <vTaskStartScheduler+0x30>
     d68:	0e 94 ae 0c 	call	0x195c	; 0x195c <xTimerCreateTimerTask>
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	81 f4       	brne	.+32     	; 0xd90 <vTaskStartScheduler+0x54>
     d70:	f8 94       	cli
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
     d7a:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <xSchedulerRunning>
     d84:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <xTickCount+0x1>
     d88:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <xTickCount>
     d8c:	0e 94 a3 01 	call	0x346	; 0x346 <xPortStartScheduler>
     d90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	08 95       	ret

00000d9c <vTaskSuspendAll>:
     d9c:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <uxSchedulerSuspended>
     da6:	08 95       	ret

00000da8 <xTaskGetTickCount>:
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	0f 92       	push	r0
     dae:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <xTickCount>
     db2:	90 91 6d 06 	lds	r25, 0x066D	; 0x80066d <xTickCount+0x1>
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	08 95       	ret

00000dbc <xTaskIncrementTick>:
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
     dc8:	81 11       	cpse	r24, r1
     dca:	01 c1       	rjmp	.+514    	; 0xfce <xTaskIncrementTick+0x212>
     dcc:	c0 91 6c 06 	lds	r28, 0x066C	; 0x80066c <xTickCount>
     dd0:	d0 91 6d 06 	lds	r29, 0x066D	; 0x80066d <xTickCount+0x1>
     dd4:	8e 01       	movw	r16, r28
     dd6:	0f 5f       	subi	r16, 0xFF	; 255
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	10 93 6d 06 	sts	0x066D, r17	; 0x80066d <xTickCount+0x1>
     dde:	00 93 6c 06 	sts	0x066C, r16	; 0x80066c <xTickCount>
     de2:	01 15       	cp	r16, r1
     de4:	11 05       	cpc	r17, r1
     de6:	b9 f4       	brne	.+46     	; 0xe16 <xTaskIncrementTick+0x5a>
     de8:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <pxDelayedTaskList>
     dec:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     df0:	20 91 82 06 	lds	r18, 0x0682	; 0x800682 <pxOverflowDelayedTaskList>
     df4:	30 91 83 06 	lds	r19, 0x0683	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     df8:	30 93 85 06 	sts	0x0685, r19	; 0x800685 <pxDelayedTaskList+0x1>
     dfc:	20 93 84 06 	sts	0x0684, r18	; 0x800684 <pxDelayedTaskList>
     e00:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     e04:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <pxOverflowDelayedTaskList>
     e08:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <xNumOfOverflows>
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <xNumOfOverflows>
     e12:	0e 94 80 04 	call	0x900	; 0x900 <prvResetNextTaskUnblockTime>
     e16:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xNextTaskUnblockTime>
     e1a:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <xNextTaskUnblockTime+0x1>
     e1e:	08 17       	cp	r16, r24
     e20:	19 07       	cpc	r17, r25
     e22:	20 f4       	brcc	.+8      	; 0xe2c <xTaskIncrementTick+0x70>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	b8 c0       	rjmp	.+368    	; 0xf98 <xTaskIncrementTick+0x1dc>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <xTaskIncrementTick+0x72>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     e32:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     e36:	90 81       	ld	r25, Z
     e38:	91 11       	cpse	r25, r1
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <xTaskIncrementTick+0x8e>
     e3c:	2f ef       	ldi	r18, 0xFF	; 255
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	30 93 64 06 	sts	0x0664, r19	; 0x800664 <xNextTaskUnblockTime+0x1>
     e44:	20 93 63 06 	sts	0x0663, r18	; 0x800663 <xNextTaskUnblockTime>
     e48:	a7 c0       	rjmp	.+334    	; 0xf98 <xTaskIncrementTick+0x1dc>
     e4a:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     e4e:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     e52:	05 80       	ldd	r0, Z+5	; 0x05
     e54:	f6 81       	ldd	r31, Z+6	; 0x06
     e56:	e0 2d       	mov	r30, r0
     e58:	06 80       	ldd	r0, Z+6	; 0x06
     e5a:	f7 81       	ldd	r31, Z+7	; 0x07
     e5c:	e0 2d       	mov	r30, r0
     e5e:	22 81       	ldd	r18, Z+2	; 0x02
     e60:	33 81       	ldd	r19, Z+3	; 0x03
     e62:	02 17       	cp	r16, r18
     e64:	13 07       	cpc	r17, r19
     e66:	28 f4       	brcc	.+10     	; 0xe72 <xTaskIncrementTick+0xb6>
     e68:	30 93 64 06 	sts	0x0664, r19	; 0x800664 <xNextTaskUnblockTime+0x1>
     e6c:	20 93 63 06 	sts	0x0663, r18	; 0x800663 <xNextTaskUnblockTime>
     e70:	93 c0       	rjmp	.+294    	; 0xf98 <xTaskIncrementTick+0x1dc>
     e72:	a2 85       	ldd	r26, Z+10	; 0x0a
     e74:	b3 85       	ldd	r27, Z+11	; 0x0b
     e76:	24 81       	ldd	r18, Z+4	; 0x04
     e78:	35 81       	ldd	r19, Z+5	; 0x05
     e7a:	46 81       	ldd	r20, Z+6	; 0x06
     e7c:	57 81       	ldd	r21, Z+7	; 0x07
     e7e:	e9 01       	movw	r28, r18
     e80:	5d 83       	std	Y+5, r21	; 0x05
     e82:	4c 83       	std	Y+4, r20	; 0x04
     e84:	26 81       	ldd	r18, Z+6	; 0x06
     e86:	37 81       	ldd	r19, Z+7	; 0x07
     e88:	44 81       	ldd	r20, Z+4	; 0x04
     e8a:	55 81       	ldd	r21, Z+5	; 0x05
     e8c:	e9 01       	movw	r28, r18
     e8e:	5b 83       	std	Y+3, r21	; 0x03
     e90:	4a 83       	std	Y+2, r20	; 0x02
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	2d 91       	ld	r18, X+
     e96:	3c 91       	ld	r19, X
     e98:	12 97       	sbiw	r26, 0x02	; 2
     e9a:	af 01       	movw	r20, r30
     e9c:	4e 5f       	subi	r20, 0xFE	; 254
     e9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ea0:	24 17       	cp	r18, r20
     ea2:	35 07       	cpc	r19, r21
     ea4:	31 f4       	brne	.+12     	; 0xeb2 <xTaskIncrementTick+0xf6>
     ea6:	26 81       	ldd	r18, Z+6	; 0x06
     ea8:	37 81       	ldd	r19, Z+7	; 0x07
     eaa:	12 96       	adiw	r26, 0x02	; 2
     eac:	3c 93       	st	X, r19
     eae:	2e 93       	st	-X, r18
     eb0:	11 97       	sbiw	r26, 0x01	; 1
     eb2:	13 86       	std	Z+11, r1	; 0x0b
     eb4:	12 86       	std	Z+10, r1	; 0x0a
     eb6:	9c 91       	ld	r25, X
     eb8:	91 50       	subi	r25, 0x01	; 1
     eba:	9c 93       	st	X, r25
     ebc:	a4 89       	ldd	r26, Z+20	; 0x14
     ebe:	b5 89       	ldd	r27, Z+21	; 0x15
     ec0:	10 97       	sbiw	r26, 0x00	; 0
     ec2:	19 f1       	breq	.+70     	; 0xf0a <xTaskIncrementTick+0x14e>
     ec4:	26 85       	ldd	r18, Z+14	; 0x0e
     ec6:	37 85       	ldd	r19, Z+15	; 0x0f
     ec8:	60 89       	ldd	r22, Z+16	; 0x10
     eca:	71 89       	ldd	r23, Z+17	; 0x11
     ecc:	e9 01       	movw	r28, r18
     ece:	7d 83       	std	Y+5, r23	; 0x05
     ed0:	6c 83       	std	Y+4, r22	; 0x04
     ed2:	20 89       	ldd	r18, Z+16	; 0x10
     ed4:	31 89       	ldd	r19, Z+17	; 0x11
     ed6:	66 85       	ldd	r22, Z+14	; 0x0e
     ed8:	77 85       	ldd	r23, Z+15	; 0x0f
     eda:	e9 01       	movw	r28, r18
     edc:	7b 83       	std	Y+3, r23	; 0x03
     ede:	6a 83       	std	Y+2, r22	; 0x02
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	6d 91       	ld	r22, X+
     ee4:	7c 91       	ld	r23, X
     ee6:	12 97       	sbiw	r26, 0x02	; 2
     ee8:	9f 01       	movw	r18, r30
     eea:	24 5f       	subi	r18, 0xF4	; 244
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	62 17       	cp	r22, r18
     ef0:	73 07       	cpc	r23, r19
     ef2:	31 f4       	brne	.+12     	; 0xf00 <xTaskIncrementTick+0x144>
     ef4:	20 89       	ldd	r18, Z+16	; 0x10
     ef6:	31 89       	ldd	r19, Z+17	; 0x11
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	3c 93       	st	X, r19
     efc:	2e 93       	st	-X, r18
     efe:	11 97       	sbiw	r26, 0x01	; 1
     f00:	15 8a       	std	Z+21, r1	; 0x15
     f02:	14 8a       	std	Z+20, r1	; 0x14
     f04:	9c 91       	ld	r25, X
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	9c 93       	st	X, r25
     f0a:	26 89       	ldd	r18, Z+22	; 0x16
     f0c:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
     f10:	92 17       	cp	r25, r18
     f12:	10 f4       	brcc	.+4      	; 0xf18 <xTaskIncrementTick+0x15c>
     f14:	20 93 6b 06 	sts	0x066B, r18	; 0x80066b <uxTopReadyPriority>
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	d9 01       	movw	r26, r18
     f1c:	aa 0f       	add	r26, r26
     f1e:	bb 1f       	adc	r27, r27
     f20:	aa 0f       	add	r26, r26
     f22:	bb 1f       	adc	r27, r27
     f24:	aa 0f       	add	r26, r26
     f26:	bb 1f       	adc	r27, r27
     f28:	2a 0f       	add	r18, r26
     f2a:	3b 1f       	adc	r19, r27
     f2c:	d9 01       	movw	r26, r18
     f2e:	a8 56       	subi	r26, 0x68	; 104
     f30:	b9 4f       	sbci	r27, 0xF9	; 249
     f32:	11 96       	adiw	r26, 0x01	; 1
     f34:	0d 90       	ld	r0, X+
     f36:	bc 91       	ld	r27, X
     f38:	a0 2d       	mov	r26, r0
     f3a:	b5 83       	std	Z+5, r27	; 0x05
     f3c:	a4 83       	std	Z+4, r26	; 0x04
     f3e:	14 96       	adiw	r26, 0x04	; 4
     f40:	2d 91       	ld	r18, X+
     f42:	3c 91       	ld	r19, X
     f44:	15 97       	sbiw	r26, 0x05	; 5
     f46:	37 83       	std	Z+7, r19	; 0x07
     f48:	26 83       	std	Z+6, r18	; 0x06
     f4a:	14 96       	adiw	r26, 0x04	; 4
     f4c:	2d 91       	ld	r18, X+
     f4e:	3c 91       	ld	r19, X
     f50:	15 97       	sbiw	r26, 0x05	; 5
     f52:	e9 01       	movw	r28, r18
     f54:	5b 83       	std	Y+3, r21	; 0x03
     f56:	4a 83       	std	Y+2, r20	; 0x02
     f58:	15 96       	adiw	r26, 0x05	; 5
     f5a:	5c 93       	st	X, r21
     f5c:	4e 93       	st	-X, r20
     f5e:	14 97       	sbiw	r26, 0x04	; 4
     f60:	a6 89       	ldd	r26, Z+22	; 0x16
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	9d 01       	movw	r18, r26
     f66:	22 0f       	add	r18, r18
     f68:	33 1f       	adc	r19, r19
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	a2 0f       	add	r26, r18
     f74:	b3 1f       	adc	r27, r19
     f76:	a8 56       	subi	r26, 0x68	; 104
     f78:	b9 4f       	sbci	r27, 0xF9	; 249
     f7a:	b3 87       	std	Z+11, r27	; 0x0b
     f7c:	a2 87       	std	Z+10, r26	; 0x0a
     f7e:	9c 91       	ld	r25, X
     f80:	9f 5f       	subi	r25, 0xFF	; 255
     f82:	9c 93       	st	X, r25
     f84:	26 89       	ldd	r18, Z+22	; 0x16
     f86:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     f8a:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     f8e:	96 89       	ldd	r25, Z+22	; 0x16
     f90:	29 17       	cp	r18, r25
     f92:	08 f0       	brcs	.+2      	; 0xf96 <xTaskIncrementTick+0x1da>
     f94:	49 cf       	rjmp	.-366    	; 0xe28 <xTaskIncrementTick+0x6c>
     f96:	4b cf       	rjmp	.-362    	; 0xe2e <xTaskIncrementTick+0x72>
     f98:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     f9c:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     fa0:	26 89       	ldd	r18, Z+22	; 0x16
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	f9 01       	movw	r30, r18
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	2e 0f       	add	r18, r30
     fb4:	3f 1f       	adc	r19, r31
     fb6:	f9 01       	movw	r30, r18
     fb8:	e8 56       	subi	r30, 0x68	; 104
     fba:	f9 4f       	sbci	r31, 0xF9	; 249
     fbc:	90 81       	ld	r25, Z
     fbe:	92 30       	cpi	r25, 0x02	; 2
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <xTaskIncrementTick+0x208>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <xYieldPending>
     fc8:	91 11       	cpse	r25, r1
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <xTaskIncrementTick+0x228>
     fcc:	0c c0       	rjmp	.+24     	; 0xfe6 <xTaskIncrementTick+0x22a>
     fce:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <xPendedTicks>
     fd2:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <xPendedTicks+0x1>
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	90 93 69 06 	sts	0x0669, r25	; 0x800669 <xPendedTicks+0x1>
     fdc:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <xPendedTicks>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <xTaskIncrementTick+0x22a>
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	08 95       	ret

00000ff0 <xTaskResumeAll>:
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	0f 92       	push	r0
     ffa:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <uxSchedulerSuspended>
    1004:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    1008:	81 11       	cpse	r24, r1
    100a:	bf c0       	rjmp	.+382    	; 0x118a <xTaskResumeAll+0x19a>
    100c:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
    1010:	81 11       	cpse	r24, r1
    1012:	96 c0       	rjmp	.+300    	; 0x1140 <xTaskResumeAll+0x150>
    1014:	bd c0       	rjmp	.+378    	; 0x1190 <xTaskResumeAll+0x1a0>
    1016:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <xPendingReadyList+0x5>
    101a:	f0 91 7f 06 	lds	r31, 0x067F	; 0x80067f <xPendingReadyList+0x6>
    101e:	06 80       	ldd	r0, Z+6	; 0x06
    1020:	f7 81       	ldd	r31, Z+7	; 0x07
    1022:	e0 2d       	mov	r30, r0
    1024:	a4 89       	ldd	r26, Z+20	; 0x14
    1026:	b5 89       	ldd	r27, Z+21	; 0x15
    1028:	c6 85       	ldd	r28, Z+14	; 0x0e
    102a:	d7 85       	ldd	r29, Z+15	; 0x0f
    102c:	80 89       	ldd	r24, Z+16	; 0x10
    102e:	91 89       	ldd	r25, Z+17	; 0x11
    1030:	9d 83       	std	Y+5, r25	; 0x05
    1032:	8c 83       	std	Y+4, r24	; 0x04
    1034:	c0 89       	ldd	r28, Z+16	; 0x10
    1036:	d1 89       	ldd	r29, Z+17	; 0x11
    1038:	86 85       	ldd	r24, Z+14	; 0x0e
    103a:	97 85       	ldd	r25, Z+15	; 0x0f
    103c:	9b 83       	std	Y+3, r25	; 0x03
    103e:	8a 83       	std	Y+2, r24	; 0x02
    1040:	11 96       	adiw	r26, 0x01	; 1
    1042:	2d 91       	ld	r18, X+
    1044:	3c 91       	ld	r19, X
    1046:	12 97       	sbiw	r26, 0x02	; 2
    1048:	cf 01       	movw	r24, r30
    104a:	0c 96       	adiw	r24, 0x0c	; 12
    104c:	28 17       	cp	r18, r24
    104e:	39 07       	cpc	r19, r25
    1050:	31 f4       	brne	.+12     	; 0x105e <xTaskResumeAll+0x6e>
    1052:	80 89       	ldd	r24, Z+16	; 0x10
    1054:	91 89       	ldd	r25, Z+17	; 0x11
    1056:	12 96       	adiw	r26, 0x02	; 2
    1058:	9c 93       	st	X, r25
    105a:	8e 93       	st	-X, r24
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	15 8a       	std	Z+21, r1	; 0x15
    1060:	14 8a       	std	Z+20, r1	; 0x14
    1062:	8c 91       	ld	r24, X
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	8c 93       	st	X, r24
    1068:	a2 85       	ldd	r26, Z+10	; 0x0a
    106a:	b3 85       	ldd	r27, Z+11	; 0x0b
    106c:	c4 81       	ldd	r28, Z+4	; 0x04
    106e:	d5 81       	ldd	r29, Z+5	; 0x05
    1070:	86 81       	ldd	r24, Z+6	; 0x06
    1072:	97 81       	ldd	r25, Z+7	; 0x07
    1074:	9d 83       	std	Y+5, r25	; 0x05
    1076:	8c 83       	std	Y+4, r24	; 0x04
    1078:	c6 81       	ldd	r28, Z+6	; 0x06
    107a:	d7 81       	ldd	r29, Z+7	; 0x07
    107c:	84 81       	ldd	r24, Z+4	; 0x04
    107e:	95 81       	ldd	r25, Z+5	; 0x05
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
    1084:	11 96       	adiw	r26, 0x01	; 1
    1086:	8d 91       	ld	r24, X+
    1088:	9c 91       	ld	r25, X
    108a:	12 97       	sbiw	r26, 0x02	; 2
    108c:	9f 01       	movw	r18, r30
    108e:	2e 5f       	subi	r18, 0xFE	; 254
    1090:	3f 4f       	sbci	r19, 0xFF	; 255
    1092:	82 17       	cp	r24, r18
    1094:	93 07       	cpc	r25, r19
    1096:	31 f4       	brne	.+12     	; 0x10a4 <xTaskResumeAll+0xb4>
    1098:	86 81       	ldd	r24, Z+6	; 0x06
    109a:	97 81       	ldd	r25, Z+7	; 0x07
    109c:	12 96       	adiw	r26, 0x02	; 2
    109e:	9c 93       	st	X, r25
    10a0:	8e 93       	st	-X, r24
    10a2:	11 97       	sbiw	r26, 0x01	; 1
    10a4:	13 86       	std	Z+11, r1	; 0x0b
    10a6:	12 86       	std	Z+10, r1	; 0x0a
    10a8:	8c 91       	ld	r24, X
    10aa:	81 50       	subi	r24, 0x01	; 1
    10ac:	8c 93       	st	X, r24
    10ae:	86 89       	ldd	r24, Z+22	; 0x16
    10b0:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
    10b4:	98 17       	cp	r25, r24
    10b6:	10 f4       	brcc	.+4      	; 0x10bc <xTaskResumeAll+0xcc>
    10b8:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxTopReadyPriority>
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	dc 01       	movw	r26, r24
    10c0:	aa 0f       	add	r26, r26
    10c2:	bb 1f       	adc	r27, r27
    10c4:	aa 0f       	add	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	aa 0f       	add	r26, r26
    10ca:	bb 1f       	adc	r27, r27
    10cc:	8a 0f       	add	r24, r26
    10ce:	9b 1f       	adc	r25, r27
    10d0:	dc 01       	movw	r26, r24
    10d2:	a8 56       	subi	r26, 0x68	; 104
    10d4:	b9 4f       	sbci	r27, 0xF9	; 249
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	0d 90       	ld	r0, X+
    10da:	bc 91       	ld	r27, X
    10dc:	a0 2d       	mov	r26, r0
    10de:	b5 83       	std	Z+5, r27	; 0x05
    10e0:	a4 83       	std	Z+4, r26	; 0x04
    10e2:	14 96       	adiw	r26, 0x04	; 4
    10e4:	8d 91       	ld	r24, X+
    10e6:	9c 91       	ld	r25, X
    10e8:	15 97       	sbiw	r26, 0x05	; 5
    10ea:	97 83       	std	Z+7, r25	; 0x07
    10ec:	86 83       	std	Z+6, r24	; 0x06
    10ee:	14 96       	adiw	r26, 0x04	; 4
    10f0:	cd 91       	ld	r28, X+
    10f2:	dc 91       	ld	r29, X
    10f4:	15 97       	sbiw	r26, 0x05	; 5
    10f6:	3b 83       	std	Y+3, r19	; 0x03
    10f8:	2a 83       	std	Y+2, r18	; 0x02
    10fa:	15 96       	adiw	r26, 0x05	; 5
    10fc:	3c 93       	st	X, r19
    10fe:	2e 93       	st	-X, r18
    1100:	14 97       	sbiw	r26, 0x04	; 4
    1102:	a6 89       	ldd	r26, Z+22	; 0x16
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	cd 01       	movw	r24, r26
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	a8 0f       	add	r26, r24
    1116:	b9 1f       	adc	r27, r25
    1118:	a8 56       	subi	r26, 0x68	; 104
    111a:	b9 4f       	sbci	r27, 0xF9	; 249
    111c:	b3 87       	std	Z+11, r27	; 0x0b
    111e:	a2 87       	std	Z+10, r26	; 0x0a
    1120:	8c 91       	ld	r24, X
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	8c 93       	st	X, r24
    1126:	96 89       	ldd	r25, Z+22	; 0x16
    1128:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
    112c:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    1130:	56 96       	adiw	r26, 0x16	; 22
    1132:	8c 91       	ld	r24, X
    1134:	98 17       	cp	r25, r24
    1136:	30 f0       	brcs	.+12     	; 0x1144 <xTaskResumeAll+0x154>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <xTaskResumeAll+0x154>
    1140:	e0 e0       	ldi	r30, 0x00	; 0
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xPendingReadyList>
    1148:	81 11       	cpse	r24, r1
    114a:	65 cf       	rjmp	.-310    	; 0x1016 <xTaskResumeAll+0x26>
    114c:	ef 2b       	or	r30, r31
    114e:	11 f0       	breq	.+4      	; 0x1154 <xTaskResumeAll+0x164>
    1150:	0e 94 80 04 	call	0x900	; 0x900 <prvResetNextTaskUnblockTime>
    1154:	c0 91 68 06 	lds	r28, 0x0668	; 0x800668 <xPendedTicks>
    1158:	d0 91 69 06 	lds	r29, 0x0669	; 0x800669 <xPendedTicks+0x1>
    115c:	20 97       	sbiw	r28, 0x00	; 0
    115e:	69 f0       	breq	.+26     	; 0x117a <xTaskResumeAll+0x18a>
    1160:	0e 94 de 06 	call	0xdbc	; 0xdbc <xTaskIncrementTick>
    1164:	88 23       	and	r24, r24
    1166:	19 f0       	breq	.+6      	; 0x116e <xTaskResumeAll+0x17e>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    116e:	21 97       	sbiw	r28, 0x01	; 1
    1170:	b9 f7       	brne	.-18     	; 0x1160 <xTaskResumeAll+0x170>
    1172:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <xPendedTicks+0x1>
    1176:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <xPendedTicks>
    117a:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <xYieldPending>
    117e:	88 23       	and	r24, r24
    1180:	31 f0       	breq	.+12     	; 0x118e <xTaskResumeAll+0x19e>
    1182:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <xTaskResumeAll+0x1a0>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <xTaskResumeAll+0x1a0>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <xTaskDelayUntil>:
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	8c 01       	movw	r16, r24
    11a4:	eb 01       	movw	r28, r22
    11a6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <vTaskSuspendAll>
    11aa:	40 91 6c 06 	lds	r20, 0x066C	; 0x80066c <xTickCount>
    11ae:	50 91 6d 06 	lds	r21, 0x066D	; 0x80066d <xTickCount+0x1>
    11b2:	f8 01       	movw	r30, r16
    11b4:	20 81       	ld	r18, Z
    11b6:	31 81       	ldd	r19, Z+1	; 0x01
    11b8:	c9 01       	movw	r24, r18
    11ba:	8c 0f       	add	r24, r28
    11bc:	9d 1f       	adc	r25, r29
    11be:	42 17       	cp	r20, r18
    11c0:	53 07       	cpc	r21, r19
    11c2:	40 f4       	brcc	.+16     	; 0x11d4 <xTaskDelayUntil+0x3a>
    11c4:	82 17       	cp	r24, r18
    11c6:	93 07       	cpc	r25, r19
    11c8:	68 f4       	brcc	.+26     	; 0x11e4 <xTaskDelayUntil+0x4a>
    11ca:	48 17       	cp	r20, r24
    11cc:	59 07       	cpc	r21, r25
    11ce:	60 f0       	brcs	.+24     	; 0x11e8 <xTaskDelayUntil+0x4e>
    11d0:	c0 e0       	ldi	r28, 0x00	; 0
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <xTaskDelayUntil+0x58>
    11d4:	82 17       	cp	r24, r18
    11d6:	93 07       	cpc	r25, r19
    11d8:	48 f0       	brcs	.+18     	; 0x11ec <xTaskDelayUntil+0x52>
    11da:	48 17       	cp	r20, r24
    11dc:	59 07       	cpc	r21, r25
    11de:	40 f0       	brcs	.+16     	; 0x11f0 <xTaskDelayUntil+0x56>
    11e0:	c0 e0       	ldi	r28, 0x00	; 0
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <xTaskDelayUntil+0x58>
    11e4:	c0 e0       	ldi	r28, 0x00	; 0
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <xTaskDelayUntil+0x58>
    11e8:	c1 e0       	ldi	r28, 0x01	; 1
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <xTaskDelayUntil+0x58>
    11ec:	c1 e0       	ldi	r28, 0x01	; 1
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <xTaskDelayUntil+0x58>
    11f0:	c1 e0       	ldi	r28, 0x01	; 1
    11f2:	f8 01       	movw	r30, r16
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	cc 23       	and	r28, r28
    11fa:	29 f0       	breq	.+10     	; 0x1206 <xTaskDelayUntil+0x6c>
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	84 1b       	sub	r24, r20
    1200:	95 0b       	sbc	r25, r21
    1202:	0e 94 06 06 	call	0xc0c	; 0xc0c <prvAddCurrentTaskToDelayedList>
    1206:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
    120a:	81 11       	cpse	r24, r1
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <xTaskDelayUntil+0x78>
    120e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
    1212:	8c 2f       	mov	r24, r28
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <vTaskSwitchContext>:
    121e:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    1222:	88 23       	and	r24, r24
    1224:	21 f0       	breq	.+8      	; 0x122e <vTaskSwitchContext+0x10>
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    122c:	08 95       	ret
    122e:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <xYieldPending>
    1232:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <uxTopReadyPriority>
    1236:	01 c0       	rjmp	.+2      	; 0x123a <vTaskSwitchContext+0x1c>
    1238:	21 50       	subi	r18, 0x01	; 1
    123a:	82 2f       	mov	r24, r18
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	fc 01       	movw	r30, r24
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	e8 0f       	add	r30, r24
    124e:	f9 1f       	adc	r31, r25
    1250:	e8 56       	subi	r30, 0x68	; 104
    1252:	f9 4f       	sbci	r31, 0xF9	; 249
    1254:	30 81       	ld	r19, Z
    1256:	33 23       	and	r19, r19
    1258:	79 f3       	breq	.-34     	; 0x1238 <vTaskSwitchContext+0x1a>
    125a:	ac 01       	movw	r20, r24
    125c:	44 0f       	add	r20, r20
    125e:	55 1f       	adc	r21, r21
    1260:	44 0f       	add	r20, r20
    1262:	55 1f       	adc	r21, r21
    1264:	44 0f       	add	r20, r20
    1266:	55 1f       	adc	r21, r21
    1268:	48 0f       	add	r20, r24
    126a:	59 1f       	adc	r21, r25
    126c:	df 01       	movw	r26, r30
    126e:	01 80       	ldd	r0, Z+1	; 0x01
    1270:	f2 81       	ldd	r31, Z+2	; 0x02
    1272:	e0 2d       	mov	r30, r0
    1274:	02 80       	ldd	r0, Z+2	; 0x02
    1276:	f3 81       	ldd	r31, Z+3	; 0x03
    1278:	e0 2d       	mov	r30, r0
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	fc 93       	st	X, r31
    127e:	ee 93       	st	-X, r30
    1280:	11 97       	sbiw	r26, 0x01	; 1
    1282:	45 56       	subi	r20, 0x65	; 101
    1284:	59 4f       	sbci	r21, 0xF9	; 249
    1286:	e4 17       	cp	r30, r20
    1288:	f5 07       	cpc	r31, r21
    128a:	29 f4       	brne	.+10     	; 0x1296 <vTaskSwitchContext+0x78>
    128c:	42 81       	ldd	r20, Z+2	; 0x02
    128e:	53 81       	ldd	r21, Z+3	; 0x03
    1290:	fd 01       	movw	r30, r26
    1292:	52 83       	std	Z+2, r21	; 0x02
    1294:	41 83       	std	Z+1, r20	; 0x01
    1296:	fc 01       	movw	r30, r24
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	8e 0f       	add	r24, r30
    12a6:	9f 1f       	adc	r25, r31
    12a8:	fc 01       	movw	r30, r24
    12aa:	e8 56       	subi	r30, 0x68	; 104
    12ac:	f9 4f       	sbci	r31, 0xF9	; 249
    12ae:	01 80       	ldd	r0, Z+1	; 0x01
    12b0:	f2 81       	ldd	r31, Z+2	; 0x02
    12b2:	e0 2d       	mov	r30, r0
    12b4:	86 81       	ldd	r24, Z+6	; 0x06
    12b6:	97 81       	ldd	r25, Z+7	; 0x07
    12b8:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <pxCurrentTCB+0x1>
    12bc:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <pxCurrentTCB>
    12c0:	20 93 6b 06 	sts	0x066B, r18	; 0x80066b <uxTopReadyPriority>
    12c4:	08 95       	ret

000012c6 <vTaskPlaceOnEventList>:
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	eb 01       	movw	r28, r22
    12cc:	60 91 bc 06 	lds	r22, 0x06BC	; 0x8006bc <pxCurrentTCB>
    12d0:	70 91 bd 06 	lds	r23, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    12d4:	64 5f       	subi	r22, 0xF4	; 244
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vListInsert>
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 06 06 	call	0xc0c	; 0xc0c <prvAddCurrentTaskToDelayedList>
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <vTaskPlaceOnEventListRestricted>:
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	fc 01       	movw	r30, r24
    12f4:	8b 01       	movw	r16, r22
    12f6:	a1 81       	ldd	r26, Z+1	; 0x01
    12f8:	b2 81       	ldd	r27, Z+2	; 0x02
    12fa:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <pxCurrentTCB>
    12fe:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    1302:	ec 01       	movw	r28, r24
    1304:	bf 87       	std	Y+15, r27	; 0x0f
    1306:	ae 87       	std	Y+14, r26	; 0x0e
    1308:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <pxCurrentTCB>
    130c:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    1310:	14 96       	adiw	r26, 0x04	; 4
    1312:	2d 91       	ld	r18, X+
    1314:	3c 91       	ld	r19, X
    1316:	15 97       	sbiw	r26, 0x05	; 5
    1318:	ec 01       	movw	r28, r24
    131a:	39 8b       	std	Y+17, r19	; 0x11
    131c:	28 8b       	std	Y+16, r18	; 0x10
    131e:	14 96       	adiw	r26, 0x04	; 4
    1320:	8d 91       	ld	r24, X+
    1322:	9c 91       	ld	r25, X
    1324:	15 97       	sbiw	r26, 0x05	; 5
    1326:	20 91 bc 06 	lds	r18, 0x06BC	; 0x8006bc <pxCurrentTCB>
    132a:	30 91 bd 06 	lds	r19, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    132e:	24 5f       	subi	r18, 0xF4	; 244
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	ec 01       	movw	r28, r24
    1334:	3b 83       	std	Y+3, r19	; 0x03
    1336:	2a 83       	std	Y+2, r18	; 0x02
    1338:	20 91 bc 06 	lds	r18, 0x06BC	; 0x8006bc <pxCurrentTCB>
    133c:	30 91 bd 06 	lds	r19, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    1340:	24 5f       	subi	r18, 0xF4	; 244
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	15 96       	adiw	r26, 0x05	; 5
    1346:	3c 93       	st	X, r19
    1348:	2e 93       	st	-X, r18
    134a:	14 97       	sbiw	r26, 0x04	; 4
    134c:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
    1350:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    1354:	55 96       	adiw	r26, 0x15	; 21
    1356:	fc 93       	st	X, r31
    1358:	ee 93       	st	-X, r30
    135a:	54 97       	sbiw	r26, 0x14	; 20
    135c:	90 81       	ld	r25, Z
    135e:	9f 5f       	subi	r25, 0xFF	; 255
    1360:	90 83       	st	Z, r25
    1362:	44 23       	and	r20, r20
    1364:	11 f0       	breq	.+4      	; 0x136a <vTaskPlaceOnEventListRestricted+0x80>
    1366:	0f ef       	ldi	r16, 0xFF	; 255
    1368:	1f ef       	ldi	r17, 0xFF	; 255
    136a:	64 2f       	mov	r22, r20
    136c:	c8 01       	movw	r24, r16
    136e:	0e 94 06 06 	call	0xc0c	; 0xc0c <prvAddCurrentTaskToDelayedList>
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <xTaskRemoveFromEventList>:
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	dc 01       	movw	r26, r24
    1382:	15 96       	adiw	r26, 0x05	; 5
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	16 97       	sbiw	r26, 0x06	; 6
    138a:	06 80       	ldd	r0, Z+6	; 0x06
    138c:	f7 81       	ldd	r31, Z+7	; 0x07
    138e:	e0 2d       	mov	r30, r0
    1390:	a4 89       	ldd	r26, Z+20	; 0x14
    1392:	b5 89       	ldd	r27, Z+21	; 0x15
    1394:	c6 85       	ldd	r28, Z+14	; 0x0e
    1396:	d7 85       	ldd	r29, Z+15	; 0x0f
    1398:	80 89       	ldd	r24, Z+16	; 0x10
    139a:	91 89       	ldd	r25, Z+17	; 0x11
    139c:	9d 83       	std	Y+5, r25	; 0x05
    139e:	8c 83       	std	Y+4, r24	; 0x04
    13a0:	c0 89       	ldd	r28, Z+16	; 0x10
    13a2:	d1 89       	ldd	r29, Z+17	; 0x11
    13a4:	86 85       	ldd	r24, Z+14	; 0x0e
    13a6:	97 85       	ldd	r25, Z+15	; 0x0f
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	11 96       	adiw	r26, 0x01	; 1
    13ae:	8d 91       	ld	r24, X+
    13b0:	9c 91       	ld	r25, X
    13b2:	12 97       	sbiw	r26, 0x02	; 2
    13b4:	9f 01       	movw	r18, r30
    13b6:	24 5f       	subi	r18, 0xF4	; 244
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	82 17       	cp	r24, r18
    13bc:	93 07       	cpc	r25, r19
    13be:	31 f4       	brne	.+12     	; 0x13cc <xTaskRemoveFromEventList+0x50>
    13c0:	80 89       	ldd	r24, Z+16	; 0x10
    13c2:	91 89       	ldd	r25, Z+17	; 0x11
    13c4:	12 96       	adiw	r26, 0x02	; 2
    13c6:	9c 93       	st	X, r25
    13c8:	8e 93       	st	-X, r24
    13ca:	11 97       	sbiw	r26, 0x01	; 1
    13cc:	15 8a       	std	Z+21, r1	; 0x15
    13ce:	14 8a       	std	Z+20, r1	; 0x14
    13d0:	8c 91       	ld	r24, X
    13d2:	81 50       	subi	r24, 0x01	; 1
    13d4:	8c 93       	st	X, r24
    13d6:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    13da:	81 11       	cpse	r24, r1
    13dc:	60 c0       	rjmp	.+192    	; 0x149e <xTaskRemoveFromEventList+0x122>
    13de:	a2 85       	ldd	r26, Z+10	; 0x0a
    13e0:	b3 85       	ldd	r27, Z+11	; 0x0b
    13e2:	c4 81       	ldd	r28, Z+4	; 0x04
    13e4:	d5 81       	ldd	r29, Z+5	; 0x05
    13e6:	86 81       	ldd	r24, Z+6	; 0x06
    13e8:	97 81       	ldd	r25, Z+7	; 0x07
    13ea:	9d 83       	std	Y+5, r25	; 0x05
    13ec:	8c 83       	std	Y+4, r24	; 0x04
    13ee:	c6 81       	ldd	r28, Z+6	; 0x06
    13f0:	d7 81       	ldd	r29, Z+7	; 0x07
    13f2:	84 81       	ldd	r24, Z+4	; 0x04
    13f4:	95 81       	ldd	r25, Z+5	; 0x05
    13f6:	9b 83       	std	Y+3, r25	; 0x03
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	11 96       	adiw	r26, 0x01	; 1
    13fc:	8d 91       	ld	r24, X+
    13fe:	9c 91       	ld	r25, X
    1400:	12 97       	sbiw	r26, 0x02	; 2
    1402:	9f 01       	movw	r18, r30
    1404:	2e 5f       	subi	r18, 0xFE	; 254
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	82 17       	cp	r24, r18
    140a:	93 07       	cpc	r25, r19
    140c:	31 f4       	brne	.+12     	; 0x141a <xTaskRemoveFromEventList+0x9e>
    140e:	86 81       	ldd	r24, Z+6	; 0x06
    1410:	97 81       	ldd	r25, Z+7	; 0x07
    1412:	12 96       	adiw	r26, 0x02	; 2
    1414:	9c 93       	st	X, r25
    1416:	8e 93       	st	-X, r24
    1418:	11 97       	sbiw	r26, 0x01	; 1
    141a:	13 86       	std	Z+11, r1	; 0x0b
    141c:	12 86       	std	Z+10, r1	; 0x0a
    141e:	8c 91       	ld	r24, X
    1420:	81 50       	subi	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	86 89       	ldd	r24, Z+22	; 0x16
    1426:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
    142a:	98 17       	cp	r25, r24
    142c:	10 f4       	brcc	.+4      	; 0x1432 <xTaskRemoveFromEventList+0xb6>
    142e:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxTopReadyPriority>
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	dc 01       	movw	r26, r24
    1436:	aa 0f       	add	r26, r26
    1438:	bb 1f       	adc	r27, r27
    143a:	aa 0f       	add	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	aa 0f       	add	r26, r26
    1440:	bb 1f       	adc	r27, r27
    1442:	8a 0f       	add	r24, r26
    1444:	9b 1f       	adc	r25, r27
    1446:	dc 01       	movw	r26, r24
    1448:	a8 56       	subi	r26, 0x68	; 104
    144a:	b9 4f       	sbci	r27, 0xF9	; 249
    144c:	11 96       	adiw	r26, 0x01	; 1
    144e:	0d 90       	ld	r0, X+
    1450:	bc 91       	ld	r27, X
    1452:	a0 2d       	mov	r26, r0
    1454:	b5 83       	std	Z+5, r27	; 0x05
    1456:	a4 83       	std	Z+4, r26	; 0x04
    1458:	14 96       	adiw	r26, 0x04	; 4
    145a:	8d 91       	ld	r24, X+
    145c:	9c 91       	ld	r25, X
    145e:	15 97       	sbiw	r26, 0x05	; 5
    1460:	97 83       	std	Z+7, r25	; 0x07
    1462:	86 83       	std	Z+6, r24	; 0x06
    1464:	14 96       	adiw	r26, 0x04	; 4
    1466:	cd 91       	ld	r28, X+
    1468:	dc 91       	ld	r29, X
    146a:	15 97       	sbiw	r26, 0x05	; 5
    146c:	3b 83       	std	Y+3, r19	; 0x03
    146e:	2a 83       	std	Y+2, r18	; 0x02
    1470:	15 96       	adiw	r26, 0x05	; 5
    1472:	3c 93       	st	X, r19
    1474:	2e 93       	st	-X, r18
    1476:	14 97       	sbiw	r26, 0x04	; 4
    1478:	a6 89       	ldd	r26, Z+22	; 0x16
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	cd 01       	movw	r24, r26
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	a8 0f       	add	r26, r24
    148c:	b9 1f       	adc	r27, r25
    148e:	a8 56       	subi	r26, 0x68	; 104
    1490:	b9 4f       	sbci	r27, 0xF9	; 249
    1492:	b3 87       	std	Z+11, r27	; 0x0b
    1494:	a2 87       	std	Z+10, r26	; 0x0a
    1496:	8c 91       	ld	r24, X
    1498:	8f 5f       	subi	r24, 0xFF	; 255
    149a:	8c 93       	st	X, r24
    149c:	1c c0       	rjmp	.+56     	; 0x14d6 <xTaskRemoveFromEventList+0x15a>
    149e:	49 e7       	ldi	r20, 0x79	; 121
    14a0:	56 e0       	ldi	r21, 0x06	; 6
    14a2:	da 01       	movw	r26, r20
    14a4:	11 96       	adiw	r26, 0x01	; 1
    14a6:	cd 91       	ld	r28, X+
    14a8:	dc 91       	ld	r29, X
    14aa:	12 97       	sbiw	r26, 0x02	; 2
    14ac:	d7 87       	std	Z+15, r29	; 0x0f
    14ae:	c6 87       	std	Z+14, r28	; 0x0e
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	91 8b       	std	Z+17, r25	; 0x11
    14b6:	80 8b       	std	Z+16, r24	; 0x10
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	dc 01       	movw	r26, r24
    14be:	13 96       	adiw	r26, 0x03	; 3
    14c0:	3c 93       	st	X, r19
    14c2:	2e 93       	st	-X, r18
    14c4:	12 97       	sbiw	r26, 0x02	; 2
    14c6:	3d 83       	std	Y+5, r19	; 0x05
    14c8:	2c 83       	std	Y+4, r18	; 0x04
    14ca:	55 8b       	std	Z+21, r21	; 0x15
    14cc:	44 8b       	std	Z+20, r20	; 0x14
    14ce:	da 01       	movw	r26, r20
    14d0:	8c 91       	ld	r24, X
    14d2:	8f 5f       	subi	r24, 0xFF	; 255
    14d4:	8c 93       	st	X, r24
    14d6:	96 89       	ldd	r25, Z+22	; 0x16
    14d8:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
    14dc:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    14e0:	86 89       	ldd	r24, Z+22	; 0x16
    14e2:	89 17       	cp	r24, r25
    14e4:	20 f4       	brcc	.+8      	; 0x14ee <xTaskRemoveFromEventList+0x172>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <xTaskRemoveFromEventList+0x174>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    14f6:	20 91 66 06 	lds	r18, 0x0666	; 0x800666 <xNumOfOverflows>
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    14fe:	20 91 6c 06 	lds	r18, 0x066C	; 0x80066c <xTickCount>
    1502:	30 91 6d 06 	lds	r19, 0x066D	; 0x80066d <xTickCount+0x1>
    1506:	32 83       	std	Z+2, r19	; 0x02
    1508:	21 83       	std	Z+1, r18	; 0x01
    150a:	08 95       	ret

0000150c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1516:	40 91 6c 06 	lds	r20, 0x066C	; 0x80066c <xTickCount>
    151a:	50 91 6d 06 	lds	r21, 0x066D	; 0x80066d <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    151e:	ec 01       	movw	r28, r24
    1520:	29 81       	ldd	r18, Y+1	; 0x01
    1522:	3a 81       	ldd	r19, Y+2	; 0x02
    1524:	da 01       	movw	r26, r20
    1526:	a2 1b       	sub	r26, r18
    1528:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    152a:	f8 81       	ld	r31, Y
    152c:	e0 91 66 06 	lds	r30, 0x0666	; 0x800666 <xNumOfOverflows>
    1530:	fe 17       	cp	r31, r30
    1532:	41 f0       	breq	.+16     	; 0x1544 <xTaskCheckForTimeOut+0x38>
    1534:	42 17       	cp	r20, r18
    1536:	53 07       	cpc	r21, r19
    1538:	28 f0       	brcs	.+10     	; 0x1544 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    153a:	fb 01       	movw	r30, r22
    153c:	11 82       	std	Z+1, r1	; 0x01
    153e:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1540:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1542:	11 c0       	rjmp	.+34     	; 0x1566 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1544:	eb 01       	movw	r28, r22
    1546:	28 81       	ld	r18, Y
    1548:	39 81       	ldd	r19, Y+1	; 0x01
    154a:	a2 17       	cp	r26, r18
    154c:	b3 07       	cpc	r27, r19
    154e:	40 f4       	brcc	.+16     	; 0x1560 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1550:	2a 1b       	sub	r18, r26
    1552:	3b 0b       	sbc	r19, r27
    1554:	39 83       	std	Y+1, r19	; 0x01
    1556:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1558:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1560:	19 82       	std	Y+1, r1	; 0x01
    1562:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1564:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    1576:	08 95       	ret

00001578 <prvGetNextExpireTime>:
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    1578:	dc 01       	movw	r26, r24
    157a:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTimerList>
    157e:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTimerList+0x1>
    1582:	80 81       	ld	r24, Z
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	81 11       	cpse	r24, r1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9c 93       	st	X, r25
    158c:	91 11       	cpse	r25, r1
    158e:	06 c0       	rjmp	.+12     	; 0x159c <prvGetNextExpireTime+0x24>
    1590:	05 80       	ldd	r0, Z+5	; 0x05
    1592:	f6 81       	ldd	r31, Z+6	; 0x06
    1594:	e0 2d       	mov	r30, r0
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	08 95       	ret
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	08 95       	ret

000015a2 <prvInsertTimerInActiveList>:
    15a2:	fc 01       	movw	r30, r24
    15a4:	73 83       	std	Z+3, r23	; 0x03
    15a6:	62 83       	std	Z+2, r22	; 0x02
    15a8:	91 87       	std	Z+9, r25	; 0x09
    15aa:	80 87       	std	Z+8, r24	; 0x08
    15ac:	46 17       	cp	r20, r22
    15ae:	57 07       	cpc	r21, r23
    15b0:	90 f0       	brcs	.+36     	; 0x15d6 <prvInsertTimerInActiveList+0x34>
    15b2:	42 1b       	sub	r20, r18
    15b4:	53 0b       	sbc	r21, r19
    15b6:	84 85       	ldd	r24, Z+12	; 0x0c
    15b8:	95 85       	ldd	r25, Z+13	; 0x0d
    15ba:	48 17       	cp	r20, r24
    15bc:	59 07       	cpc	r21, r25
    15be:	e0 f4       	brcc	.+56     	; 0x15f8 <prvInsertTimerInActiveList+0x56>
    15c0:	bf 01       	movw	r22, r30
    15c2:	6e 5f       	subi	r22, 0xFE	; 254
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <pxOverflowTimerList>
    15ca:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <pxOverflowTimerList+0x1>
    15ce:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vListInsert>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	08 95       	ret
    15d6:	42 17       	cp	r20, r18
    15d8:	53 07       	cpc	r21, r19
    15da:	18 f4       	brcc	.+6      	; 0x15e2 <prvInsertTimerInActiveList+0x40>
    15dc:	62 17       	cp	r22, r18
    15de:	73 07       	cpc	r23, r19
    15e0:	68 f4       	brcc	.+26     	; 0x15fc <prvInsertTimerInActiveList+0x5a>
    15e2:	bf 01       	movw	r22, r30
    15e4:	6e 5f       	subi	r22, 0xFE	; 254
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <pxCurrentTimerList>
    15ec:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <pxCurrentTimerList+0x1>
    15f0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <vListInsert>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	08 95       	ret
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	08 95       	ret
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	08 95       	ret

00001600 <prvReloadTimer>:
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	ec 01       	movw	r28, r24
    160e:	8b 01       	movw	r16, r22
    1610:	7a 01       	movw	r14, r20
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <prvReloadTimer+0x24>
    1614:	8c 85       	ldd	r24, Y+12	; 0x0c
    1616:	9d 85       	ldd	r25, Y+13	; 0x0d
    1618:	08 0f       	add	r16, r24
    161a:	19 1f       	adc	r17, r25
    161c:	e8 89       	ldd	r30, Y+16	; 0x10
    161e:	f9 89       	ldd	r31, Y+17	; 0x11
    1620:	ce 01       	movw	r24, r28
    1622:	09 95       	icall
    1624:	6c 85       	ldd	r22, Y+12	; 0x0c
    1626:	7d 85       	ldd	r23, Y+13	; 0x0d
    1628:	60 0f       	add	r22, r16
    162a:	71 1f       	adc	r23, r17
    162c:	98 01       	movw	r18, r16
    162e:	a7 01       	movw	r20, r14
    1630:	ce 01       	movw	r24, r28
    1632:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <prvInsertTimerInActiveList>
    1636:	81 11       	cpse	r24, r1
    1638:	ed cf       	rjmp	.-38     	; 0x1614 <prvReloadTimer+0x14>
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	08 95       	ret

00001648 <prvProcessExpiredTimer>:
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	8c 01       	movw	r16, r24
    1656:	7b 01       	movw	r14, r22
    1658:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTimerList>
    165c:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTimerList+0x1>
    1660:	05 80       	ldd	r0, Z+5	; 0x05
    1662:	f6 81       	ldd	r31, Z+6	; 0x06
    1664:	e0 2d       	mov	r30, r0
    1666:	c6 81       	ldd	r28, Z+6	; 0x06
    1668:	d7 81       	ldd	r29, Z+7	; 0x07
    166a:	ce 01       	movw	r24, r28
    166c:	02 96       	adiw	r24, 0x02	; 2
    166e:	0e 94 07 01 	call	0x20e	; 0x20e <uxListRemove>
    1672:	8a 89       	ldd	r24, Y+18	; 0x12
    1674:	82 ff       	sbrs	r24, 2
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <prvProcessExpiredTimer+0x3c>
    1678:	a7 01       	movw	r20, r14
    167a:	b8 01       	movw	r22, r16
    167c:	ce 01       	movw	r24, r28
    167e:	0e 94 00 0b 	call	0x1600	; 0x1600 <prvReloadTimer>
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <prvProcessExpiredTimer+0x40>
    1684:	8e 7f       	andi	r24, 0xFE	; 254
    1686:	8a 8b       	std	Y+18, r24	; 0x12
    1688:	e8 89       	ldd	r30, Y+16	; 0x10
    168a:	f9 89       	ldd	r31, Y+17	; 0x11
    168c:	ce 01       	movw	r24, r28
    168e:	09 95       	icall
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	08 95       	ret

0000169e <prvSwitchTimerLists>:
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <prvSwitchTimerLists+0x14>
    16a0:	05 80       	ldd	r0, Z+5	; 0x05
    16a2:	f6 81       	ldd	r31, Z+6	; 0x06
    16a4:	e0 2d       	mov	r30, r0
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	0e 94 24 0b 	call	0x1648	; 0x1648 <prvProcessExpiredTimer>
    16b2:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTimerList>
    16b6:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTimerList+0x1>
    16ba:	80 81       	ld	r24, Z
    16bc:	81 11       	cpse	r24, r1
    16be:	f0 cf       	rjmp	.-32     	; 0x16a0 <prvSwitchTimerLists+0x2>
    16c0:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <pxOverflowTimerList>
    16c4:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <pxOverflowTimerList+0x1>
    16c8:	90 93 c7 06 	sts	0x06C7, r25	; 0x8006c7 <pxCurrentTimerList+0x1>
    16cc:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <pxCurrentTimerList>
    16d0:	f0 93 c5 06 	sts	0x06C5, r31	; 0x8006c5 <pxOverflowTimerList+0x1>
    16d4:	e0 93 c4 06 	sts	0x06C4, r30	; 0x8006c4 <pxOverflowTimerList>
    16d8:	08 95       	ret

000016da <prvSampleTimeNow>:
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	8c 01       	movw	r16, r24
    16e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskGetTickCount>
    16e8:	ec 01       	movw	r28, r24
    16ea:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <xLastTime.2420>
    16ee:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <xLastTime.2420+0x1>
    16f2:	c8 17       	cp	r28, r24
    16f4:	d9 07       	cpc	r29, r25
    16f6:	30 f4       	brcc	.+12     	; 0x1704 <prvSampleTimeNow+0x2a>
    16f8:	0e 94 4f 0b 	call	0x169e	; 0x169e <prvSwitchTimerLists>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	f8 01       	movw	r30, r16
    1700:	80 83       	st	Z, r24
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <prvSampleTimeNow+0x2e>
    1704:	f8 01       	movw	r30, r16
    1706:	10 82       	st	Z, r1
    1708:	d0 93 bf 06 	sts	0x06BF, r29	; 0x8006bf <xLastTime.2420+0x1>
    170c:	c0 93 be 06 	sts	0x06BE, r28	; 0x8006be <xLastTime.2420>
    1710:	ce 01       	movw	r24, r28
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <prvProcessTimerOrBlockTask>:
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	1f 92       	push	r1
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	7c 01       	movw	r14, r24
    1732:	16 2f       	mov	r17, r22
    1734:	0e 94 ce 06 	call	0xd9c	; 0xd9c <vTaskSuspendAll>
    1738:	ce 01       	movw	r24, r28
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvSampleTimeNow>
    1740:	6c 01       	movw	r12, r24
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	81 11       	cpse	r24, r1
    1746:	27 c0       	rjmp	.+78     	; 0x1796 <prvProcessTimerOrBlockTask+0x7a>
    1748:	11 11       	cpse	r17, r1
    174a:	0a c0       	rjmp	.+20     	; 0x1760 <prvProcessTimerOrBlockTask+0x44>
    174c:	ce 14       	cp	r12, r14
    174e:	df 04       	cpc	r13, r15
    1750:	38 f0       	brcs	.+14     	; 0x1760 <prvProcessTimerOrBlockTask+0x44>
    1752:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
    1756:	b6 01       	movw	r22, r12
    1758:	c7 01       	movw	r24, r14
    175a:	0e 94 24 0b 	call	0x1648	; 0x1648 <prvProcessExpiredTimer>
    175e:	1d c0       	rjmp	.+58     	; 0x179a <prvProcessTimerOrBlockTask+0x7e>
    1760:	11 23       	and	r17, r17
    1762:	41 f0       	breq	.+16     	; 0x1774 <prvProcessTimerOrBlockTask+0x58>
    1764:	e0 91 c4 06 	lds	r30, 0x06C4	; 0x8006c4 <pxOverflowTimerList>
    1768:	f0 91 c5 06 	lds	r31, 0x06C5	; 0x8006c5 <pxOverflowTimerList+0x1>
    176c:	80 81       	ld	r24, Z
    176e:	11 e0       	ldi	r17, 0x01	; 1
    1770:	81 11       	cpse	r24, r1
    1772:	10 e0       	ldi	r17, 0x00	; 0
    1774:	b7 01       	movw	r22, r14
    1776:	6c 19       	sub	r22, r12
    1778:	7d 09       	sbc	r23, r13
    177a:	41 2f       	mov	r20, r17
    177c:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <xTimerQueue>
    1780:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <xTimerQueue+0x1>
    1784:	0e 94 63 04 	call	0x8c6	; 0x8c6 <vQueueWaitForMessageRestricted>
    1788:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
    178c:	81 11       	cpse	r24, r1
    178e:	05 c0       	rjmp	.+10     	; 0x179a <prvProcessTimerOrBlockTask+0x7e>
    1790:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <vPortYield>
    1794:	02 c0       	rjmp	.+4      	; 0x179a <prvProcessTimerOrBlockTask+0x7e>
    1796:	0e 94 f8 07 	call	0xff0	; 0xff0 <xTaskResumeAll>
    179a:	0f 90       	pop	r0
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	08 95       	ret

000017ac <prvProcessReceivedCommands>:
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <prvProcessReceivedCommands+0xe>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <prvProcessReceivedCommands+0x10>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <prvProcessReceivedCommands+0x12>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	7a c0       	rjmp	.+244    	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	88 23       	and	r24, r24
    17c8:	0c f4       	brge	.+2      	; 0x17cc <prvProcessReceivedCommands+0x20>
    17ca:	76 c0       	rjmp	.+236    	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    17cc:	0c 81       	ldd	r16, Y+4	; 0x04
    17ce:	1d 81       	ldd	r17, Y+5	; 0x05
    17d0:	d8 01       	movw	r26, r16
    17d2:	1a 96       	adiw	r26, 0x0a	; 10
    17d4:	8d 91       	ld	r24, X+
    17d6:	9c 91       	ld	r25, X
    17d8:	1b 97       	sbiw	r26, 0x0b	; 11
    17da:	89 2b       	or	r24, r25
    17dc:	21 f0       	breq	.+8      	; 0x17e6 <prvProcessReceivedCommands+0x3a>
    17de:	c8 01       	movw	r24, r16
    17e0:	02 96       	adiw	r24, 0x02	; 2
    17e2:	0e 94 07 01 	call	0x20e	; 0x20e <uxListRemove>
    17e6:	ce 01       	movw	r24, r28
    17e8:	06 96       	adiw	r24, 0x06	; 6
    17ea:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvSampleTimeNow>
    17ee:	7c 01       	movw	r14, r24
    17f0:	e9 81       	ldd	r30, Y+1	; 0x01
    17f2:	8e 2f       	mov	r24, r30
    17f4:	ee 0f       	add	r30, r30
    17f6:	99 0b       	sbc	r25, r25
    17f8:	aa 0b       	sbc	r26, r26
    17fa:	bb 0b       	sbc	r27, r27
    17fc:	fc 01       	movw	r30, r24
    17fe:	31 97       	sbiw	r30, 0x01	; 1
    1800:	e9 30       	cpi	r30, 0x09	; 9
    1802:	f1 05       	cpc	r31, r1
    1804:	08 f0       	brcs	.+2      	; 0x1808 <prvProcessReceivedCommands+0x5c>
    1806:	58 c0       	rjmp	.+176    	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    1808:	e6 5d       	subi	r30, 0xD6	; 214
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__tablejump2__>
    1810:	f8 01       	movw	r30, r16
    1812:	82 89       	ldd	r24, Z+18	; 0x12
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	82 8b       	std	Z+18, r24	; 0x12
    1818:	2a 81       	ldd	r18, Y+2	; 0x02
    181a:	3b 81       	ldd	r19, Y+3	; 0x03
    181c:	64 85       	ldd	r22, Z+12	; 0x0c
    181e:	75 85       	ldd	r23, Z+13	; 0x0d
    1820:	62 0f       	add	r22, r18
    1822:	73 1f       	adc	r23, r19
    1824:	a7 01       	movw	r20, r14
    1826:	c8 01       	movw	r24, r16
    1828:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <prvInsertTimerInActiveList>
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <prvProcessReceivedCommands+0x86>
    1830:	43 c0       	rjmp	.+134    	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    1832:	d8 01       	movw	r26, r16
    1834:	52 96       	adiw	r26, 0x12	; 18
    1836:	8c 91       	ld	r24, X
    1838:	52 97       	sbiw	r26, 0x12	; 18
    183a:	82 ff       	sbrs	r24, 2
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <prvProcessReceivedCommands+0xac>
    183e:	6a 81       	ldd	r22, Y+2	; 0x02
    1840:	7b 81       	ldd	r23, Y+3	; 0x03
    1842:	1c 96       	adiw	r26, 0x0c	; 12
    1844:	8d 91       	ld	r24, X+
    1846:	9c 91       	ld	r25, X
    1848:	1d 97       	sbiw	r26, 0x0d	; 13
    184a:	68 0f       	add	r22, r24
    184c:	79 1f       	adc	r23, r25
    184e:	a7 01       	movw	r20, r14
    1850:	c8 01       	movw	r24, r16
    1852:	0e 94 00 0b 	call	0x1600	; 0x1600 <prvReloadTimer>
    1856:	03 c0       	rjmp	.+6      	; 0x185e <prvProcessReceivedCommands+0xb2>
    1858:	8e 7f       	andi	r24, 0xFE	; 254
    185a:	f8 01       	movw	r30, r16
    185c:	82 8b       	std	Z+18, r24	; 0x12
    185e:	d8 01       	movw	r26, r16
    1860:	50 96       	adiw	r26, 0x10	; 16
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	51 97       	sbiw	r26, 0x11	; 17
    1868:	c8 01       	movw	r24, r16
    186a:	09 95       	icall
    186c:	25 c0       	rjmp	.+74     	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    186e:	f8 01       	movw	r30, r16
    1870:	82 89       	ldd	r24, Z+18	; 0x12
    1872:	8e 7f       	andi	r24, 0xFE	; 254
    1874:	82 8b       	std	Z+18, r24	; 0x12
    1876:	20 c0       	rjmp	.+64     	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    1878:	d8 01       	movw	r26, r16
    187a:	52 96       	adiw	r26, 0x12	; 18
    187c:	8c 91       	ld	r24, X
    187e:	52 97       	sbiw	r26, 0x12	; 18
    1880:	81 60       	ori	r24, 0x01	; 1
    1882:	52 96       	adiw	r26, 0x12	; 18
    1884:	8c 93       	st	X, r24
    1886:	52 97       	sbiw	r26, 0x12	; 18
    1888:	6a 81       	ldd	r22, Y+2	; 0x02
    188a:	7b 81       	ldd	r23, Y+3	; 0x03
    188c:	1d 96       	adiw	r26, 0x0d	; 13
    188e:	7c 93       	st	X, r23
    1890:	6e 93       	st	-X, r22
    1892:	1c 97       	sbiw	r26, 0x0c	; 12
    1894:	6e 0d       	add	r22, r14
    1896:	7f 1d       	adc	r23, r15
    1898:	97 01       	movw	r18, r14
    189a:	a7 01       	movw	r20, r14
    189c:	c8 01       	movw	r24, r16
    189e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <prvInsertTimerInActiveList>
    18a2:	0a c0       	rjmp	.+20     	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    18a4:	f8 01       	movw	r30, r16
    18a6:	82 89       	ldd	r24, Z+18	; 0x12
    18a8:	81 fd       	sbrc	r24, 1
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <prvProcessReceivedCommands+0x108>
    18ac:	c8 01       	movw	r24, r16
    18ae:	0e 94 c4 02 	call	0x588	; 0x588 <vPortFree>
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <prvProcessReceivedCommands+0x10c>
    18b4:	8e 7f       	andi	r24, 0xFE	; 254
    18b6:	82 8b       	std	Z+18, r24	; 0x12
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	be 01       	movw	r22, r28
    18be:	6f 5f       	subi	r22, 0xFF	; 255
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <xTimerQueue>
    18c6:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <xTimerQueue+0x1>
    18ca:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <xQueueReceive>
    18ce:	81 11       	cpse	r24, r1
    18d0:	79 cf       	rjmp	.-270    	; 0x17c4 <prvProcessReceivedCommands+0x18>
    18d2:	26 96       	adiw	r28, 0x06	; 6
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	08 95       	ret

000018ec <prvTimerTask>:
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	1f 92       	push	r1
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	0e 94 bc 0a 	call	0x1578	; 0x1578 <prvGetNextExpireTime>
    18fe:	69 81       	ldd	r22, Y+1	; 0x01
    1900:	0e 94 8e 0b 	call	0x171c	; 0x171c <prvProcessTimerOrBlockTask>
    1904:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <prvProcessReceivedCommands>
    1908:	f6 cf       	rjmp	.-20     	; 0x18f6 <prvTimerTask+0xa>

0000190a <prvCheckForValidListAndQueue>:
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	0f 92       	push	r0
    1910:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <xTimerQueue>
    1914:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <xTimerQueue+0x1>
    1918:	89 2b       	or	r24, r25
    191a:	e9 f4       	brne	.+58     	; 0x1956 <prvCheckForValidListAndQueue+0x4c>
    191c:	81 ed       	ldi	r24, 0xD1	; 209
    191e:	96 e0       	ldi	r25, 0x06	; 6
    1920:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
    1924:	88 ec       	ldi	r24, 0xC8	; 200
    1926:	96 e0       	ldi	r25, 0x06	; 6
    1928:	0e 94 c4 00 	call	0x188	; 0x188 <vListInitialise>
    192c:	81 ed       	ldi	r24, 0xD1	; 209
    192e:	96 e0       	ldi	r25, 0x06	; 6
    1930:	90 93 c7 06 	sts	0x06C7, r25	; 0x8006c7 <pxCurrentTimerList+0x1>
    1934:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <pxCurrentTimerList>
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	96 e0       	ldi	r25, 0x06	; 6
    193c:	90 93 c5 06 	sts	0x06C5, r25	; 0x8006c5 <pxOverflowTimerList+0x1>
    1940:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <pxOverflowTimerList>
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	65 e0       	ldi	r22, 0x05	; 5
    1948:	8a e0       	ldi	r24, 0x0A	; 10
    194a:	0e 94 93 03 	call	0x726	; 0x726 <xQueueGenericCreate>
    194e:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <xTimerQueue+0x1>
    1952:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <xTimerQueue>
    1956:	0f 90       	pop	r0
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	08 95       	ret

0000195c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    195c:	ef 92       	push	r14
    195e:	ff 92       	push	r15
    1960:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    1962:	0e 94 85 0c 	call	0x190a	; 0x190a <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    1966:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <xTimerQueue>
    196a:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <xTimerQueue+0x1>
    196e:	89 2b       	or	r24, r25
    1970:	91 f0       	breq	.+36     	; 0x1996 <xTimerCreateTimerTask+0x3a>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    1972:	0f 2e       	mov	r0, r31
    1974:	f0 ec       	ldi	r31, 0xC0	; 192
    1976:	ef 2e       	mov	r14, r31
    1978:	f6 e0       	ldi	r31, 0x06	; 6
    197a:	ff 2e       	mov	r15, r31
    197c:	f0 2d       	mov	r31, r0
    197e:	03 e0       	ldi	r16, 0x03	; 3
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	45 e5       	ldi	r20, 0x55	; 85
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	68 e7       	ldi	r22, 0x78	; 120
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	86 e7       	ldi	r24, 0x76	; 118
    198e:	9c e0       	ldi	r25, 0x0C	; 12
    1990:	0e 94 4a 06 	call	0xc94	; 0xc94 <xTaskCreate>
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <xTimerCreateTimerTask+0x3c>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    1996:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	08 95       	ret

000019a0 <__udivmodhi4>:
    19a0:	aa 1b       	sub	r26, r26
    19a2:	bb 1b       	sub	r27, r27
    19a4:	51 e1       	ldi	r21, 0x11	; 17
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <__udivmodhi4_ep>

000019a8 <__udivmodhi4_loop>:
    19a8:	aa 1f       	adc	r26, r26
    19aa:	bb 1f       	adc	r27, r27
    19ac:	a6 17       	cp	r26, r22
    19ae:	b7 07       	cpc	r27, r23
    19b0:	10 f0       	brcs	.+4      	; 0x19b6 <__udivmodhi4_ep>
    19b2:	a6 1b       	sub	r26, r22
    19b4:	b7 0b       	sbc	r27, r23

000019b6 <__udivmodhi4_ep>:
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	5a 95       	dec	r21
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__udivmodhi4_loop>
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	08 95       	ret

000019c8 <__tablejump2__>:
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	05 90       	lpm	r0, Z+
    19ce:	f4 91       	lpm	r31, Z
    19d0:	e0 2d       	mov	r30, r0
    19d2:	09 94       	ijmp

000019d4 <memcpy>:
    19d4:	fb 01       	movw	r30, r22
    19d6:	dc 01       	movw	r26, r24
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <memcpy+0xa>
    19da:	01 90       	ld	r0, Z+
    19dc:	0d 92       	st	X+, r0
    19de:	41 50       	subi	r20, 0x01	; 1
    19e0:	50 40       	sbci	r21, 0x00	; 0
    19e2:	d8 f7       	brcc	.-10     	; 0x19da <memcpy+0x6>
    19e4:	08 95       	ret

000019e6 <_exit>:
    19e6:	f8 94       	cli

000019e8 <__stop_program>:
    19e8:	ff cf       	rjmp	.-2      	; 0x19e8 <__stop_program>
